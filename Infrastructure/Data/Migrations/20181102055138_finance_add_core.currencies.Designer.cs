// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SqlserverContext))]
    [Migration("20181102055138_finance_add_core.currencies")]
    partial class finance_add_corecurrencies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.AccessToken", b =>
                {
                    b.Property<Guid>("AccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("access_token_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<string>("Audience")
                        .IsRequired()
                        .HasColumnName("audience")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Claims")
                        .HasColumnName("claims");

                    b.Property<string>("ClientToken")
                        .HasColumnName("client_token");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnName("expires_on");

                    b.Property<string>("Header")
                        .HasColumnName("header")
                        .HasMaxLength(500);

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(100);

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnName("issued_by")
                        .HasMaxLength(500);

                    b.Property<long>("LoginId")
                        .HasColumnName("login_id");

                    b.Property<bool>("Revoked")
                        .HasColumnName("revoked");

                    b.Property<int?>("RevokedBy")
                        .HasColumnName("revoked_by");

                    b.Property<DateTimeOffset?>("RevokedOn")
                        .HasColumnName("revoked_on");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasMaxLength(500);

                    b.Property<string>("TokenId")
                        .HasColumnName("token_id")
                        .HasMaxLength(500);

                    b.Property<string>("UserAgent")
                        .HasColumnName("user_agent")
                        .HasMaxLength(500);

                    b.HasKey("AccessTokenId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("LoginId");

                    b.HasIndex("RevokedBy");

                    b.ToTable("access_tokens","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("application_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppSecret")
                        .HasColumnName("app_secret")
                        .HasMaxLength(500);

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnName("application_name")
                        .HasMaxLength(100);

                    b.Property<string>("ApplicationUrl")
                        .HasColumnName("application_url")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("BrowserBasedApp")
                        .HasColumnName("browser_based_app");

                    b.Property<string>("Culture")
                        .HasColumnName("culture")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name")
                        .HasMaxLength(100);

                    b.Property<string>("PrivacyPolicyUrl")
                        .HasColumnName("privacy_policy_url")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnName("published_on")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnName("publisher")
                        .HasMaxLength(100);

                    b.Property<string>("RedirectUrl")
                        .HasColumnName("redirect_url")
                        .HasMaxLength(500);

                    b.Property<string>("SupportEmail")
                        .HasColumnName("support_email")
                        .HasMaxLength(100);

                    b.Property<string>("TermsOfServiceUrl")
                        .HasColumnName("terms_of_service_url")
                        .HasMaxLength(500);

                    b.Property<string>("VersionNumber")
                        .HasColumnName("version_number")
                        .HasMaxLength(100);

                    b.HasKey("ApplicationId");

                    b.HasIndex("AppSecret")
                        .IsUnique()
                        .HasName("UQ__applicat__89A4E7765D484DF6")
                        .HasFilter("[app_secret] IS NOT NULL");

                    b.HasIndex("ApplicationName")
                        .IsUnique()
                        .HasName("applications_app_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.ToTable("applications","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.ConfigurationProfile", b =>
                {
                    b.Property<int>("ConfigurationProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("configuration_profile_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowFacebookRegistration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_facebook_registration")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("AllowGoogleRegistration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_google_registration")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("AllowRegistration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_registration")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FacebookAppId")
                        .HasColumnName("facebook_app_id")
                        .HasMaxLength(500);

                    b.Property<string>("FacebookScope")
                        .HasColumnName("facebook_scope")
                        .HasMaxLength(500);

                    b.Property<string>("GoogleSigninClientId")
                        .HasColumnName("google_signin_client_id")
                        .HasMaxLength(500);

                    b.Property<string>("GoogleSigninScope")
                        .HasColumnName("google_signin_scope")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnName("profile_name")
                        .HasMaxLength(100);

                    b.Property<int>("RegistrationOfficeId")
                        .HasColumnName("registration_office_id");

                    b.Property<int>("RegistrationRoleId")
                        .HasColumnName("registration_role_id");

                    b.HasKey("ConfigurationProfileId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("IsActive")
                        .IsUnique()
                        .HasName("configuration_profile_uix")
                        .HasFilter("([is_active]=(1) AND [deleted]=(0))");

                    b.HasIndex("ProfileName")
                        .IsUnique()
                        .HasName("UQ__configur__0C85D9E128BA427A");

                    b.HasIndex("RegistrationOfficeId");

                    b.HasIndex("RegistrationRoleId");

                    b.ToTable("configuration_profiles","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.FbAccessToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FbUserId")
                        .HasColumnName("fb_user_id")
                        .HasMaxLength(500);

                    b.Property<string>("Token")
                        .HasColumnName("token");

                    b.HasKey("UserId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("fb_access_tokens","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.GoogleAccessToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Token")
                        .HasColumnName("token");

                    b.HasKey("UserId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("google_access_tokens","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.InstalledDomain", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("domain_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminEmail")
                        .HasColumnName("admin_email")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DomainName")
                        .HasColumnName("domain_name")
                        .HasMaxLength(500);

                    b.HasKey("DomainId");

                    b.HasIndex("DomainName")
                        .IsUnique()
                        .HasName("installed_domains_domain_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("installed_domains","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Login", b =>
                {
                    b.Property<long>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("login_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasMaxLength(500);

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnName("culture")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset>("LoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("login_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("logins","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Registration", b =>
                {
                    b.Property<Guid>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("registration_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasMaxLength(500);

                    b.Property<bool?>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confirmed")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnName("confirmed_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("RegisteredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("registered_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("RegistrationId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("registrations_email_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("registrations","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.ResetRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("request_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasMaxLength(500);

                    b.Property<bool?>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confirmed")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnName("confirmed_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("expires_on")
                        .HasDefaultValueSql("(dateadd(day,(1),getutcdate()))");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("RequestedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("requested_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("RequestId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UserId");

                    b.ToTable("reset_requests","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnName("is_administrator");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasMaxLength(100);

                    b.HasKey("RoleId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasName("UQ__roles__783254B1A0BC1C3C");

                    b.ToTable("roles","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("LastBrowser")
                        .HasColumnName("last_browser")
                        .HasMaxLength(500);

                    b.Property<string>("LastIp")
                        .HasColumnName("last_ip")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("LastSeenOn")
                        .HasColumnName("last_seen_on");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("UserId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("users_email_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.ToTable("users","account");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddessBook.Contact1", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(500);

                    b.Property<int?>("AssociatedUserId")
                        .HasColumnName("associated_user_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnName("birth_day")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(500);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(500);

                    b.Property<int?>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmailAddresses")
                        .HasColumnName("email_addresses")
                        .HasMaxLength(1000);

                    b.Property<string>("FaxNumbers")
                        .HasColumnName("fax_numbers")
                        .HasMaxLength(1000);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(200);

                    b.Property<string>("FormattedName")
                        .IsRequired()
                        .HasColumnName("formatted_name")
                        .HasMaxLength(610);

                    b.Property<int?>("Gender")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsPrivate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_private")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Kind")
                        .HasColumnName("kind");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasMaxLength(500);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(200);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasMaxLength(200);

                    b.Property<string>("MobileNumbers")
                        .HasColumnName("mobile_numbers")
                        .HasMaxLength(1000);

                    b.Property<string>("NickName")
                        .HasColumnName("nick_name")
                        .HasMaxLength(610);

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnName("organization")
                        .HasMaxLength(500);

                    b.Property<string>("OrganizationalUnit")
                        .HasColumnName("organizational_unit")
                        .HasMaxLength(500);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(500);

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix")
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasMaxLength(500);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(500);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(500);

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasMaxLength(200);

                    b.Property<string>("Tags")
                        .HasColumnName("tags")
                        .HasMaxLength(500);

                    b.Property<string>("Telephones")
                        .HasColumnName("telephones")
                        .HasMaxLength(1000);

                    b.Property<string>("TimeZone")
                        .HasColumnName("time_zone")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(500);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(1000);

                    b.HasKey("ContactId");

                    b.HasIndex("AssociatedUserId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("contacts","addressbook");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.AccessType", b =>
                {
                    b.Property<int>("AccessTypeId")
                        .HasColumnName("access_type_id");

                    b.Property<string>("AccessTypeName")
                        .IsRequired()
                        .HasColumnName("access_type_name")
                        .HasMaxLength(48);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AccessTypeId");

                    b.HasIndex("AccessTypeName")
                        .IsUnique()
                        .HasName("access_types_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.ToTable("access_types","auth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.EntityAccessPolicy", b =>
                {
                    b.Property<int>("EntityAccessPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("entity_access_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessTypeId")
                        .HasColumnName("access_type_id");

                    b.Property<bool>("AllowAccess")
                        .HasColumnName("allow_access");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasMaxLength(500);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("EntityAccessPolicyId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("entity_access_policy","auth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.GroupEntityAccessPolicy", b =>
                {
                    b.Property<int>("GroupEntityAccessPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_entity_access_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessTypeId")
                        .HasColumnName("access_type_id");

                    b.Property<bool>("AllowAccess")
                        .HasColumnName("allow_access");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EntityName")
                        .HasColumnName("entity_name")
                        .HasMaxLength(500);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("GroupEntityAccessPolicyId");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.ToTable("group_entity_access_policy","auth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.GroupMenuAccessPolicy", b =>
                {
                    b.Property<long>("GroupMenuAccessPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("group_menu_access_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("GroupMenuAccessPolicyId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("OfficeId", "MenuId", "RoleId")
                        .IsUnique()
                        .HasName("menu_access_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("group_menu_access_policy","auth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.MenuAccessPolicy", b =>
                {
                    b.Property<long>("MenuAccessPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_access_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowAccess")
                        .HasColumnName("allow_access");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("DisallowAccess")
                        .HasColumnName("disallow_access");

                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("MenuAccessPolicyId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.HasIndex("OfficeId", "MenuId", "UserId")
                        .IsUnique()
                        .HasName("menu_access_policy_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("menu_access_policy","auth");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Calendar.Category1", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("category_name")
                        .HasMaxLength(200);

                    b.Property<short?>("CategoryOrder")
                        .HasColumnName("category_order");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnName("color_code")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLocal")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_local")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("CategoryId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UserId", "CategoryName")
                        .IsUnique()
                        .HasName("categories_user_id_category_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("categories","calendar");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Calendar.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("event_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int?>("Alarm")
                        .HasColumnName("alarm");

                    b.Property<bool>("AllDay")
                        .HasColumnName("all_day");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset>("EndsOn")
                        .HasColumnName("ends_on");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnName("is_private");

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<string>("Note")
                        .HasColumnName("note");

                    b.Property<string>("Recurrence")
                        .HasColumnName("recurrence");

                    b.Property<string>("ReminderTypes")
                        .HasColumnName("reminder_types");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnName("starts_at");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnName("time_zone")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset?>("Until")
                        .HasColumnName("until");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(500);

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("EventId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("events","calendar");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomField", b =>
                {
                    b.Property<long>("CustomFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custom_field_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CustomFieldSetupId")
                        .HasColumnName("custom_field_setup_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnName("resource_id")
                        .HasMaxLength(500);

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("CustomFieldId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomFieldSetupId");

                    b.ToTable("custom_fields","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldDataType", b =>
                {
                    b.Property<string>("DataType")
                        .HasColumnName("data_type")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UnderlyingType")
                        .IsRequired()
                        .HasColumnName("underlying_type")
                        .HasMaxLength(500);

                    b.HasKey("DataType");

                    b.HasIndex("AuditUserId");

                    b.ToTable("custom_field_data_types","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldForm", b =>
                {
                    b.Property<string>("FormName")
                        .HasColumnName("form_name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnName("key_name")
                        .HasMaxLength(500);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnName("table_name")
                        .HasMaxLength(500);

                    b.HasKey("FormName");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("TableName")
                        .IsUnique()
                        .HasName("UQ__custom_f__B228A5BF4DE4C087");

                    b.ToTable("custom_field_forms","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldSetup", b =>
                {
                    b.Property<int>("CustomFieldSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("custom_field_setup_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AfterField")
                        .HasColumnName("after_field")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BeforeField")
                        .HasColumnName("before_field")
                        .HasMaxLength(500);

                    b.Property<string>("DataType")
                        .HasColumnName("data_type")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("FieldLabel")
                        .IsRequired()
                        .HasColumnName("field_label")
                        .HasMaxLength(200);

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("field_name")
                        .HasMaxLength(100);

                    b.Property<int>("FieldOrder")
                        .HasColumnName("field_order");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasColumnName("form_name")
                        .HasMaxLength(100);

                    b.HasKey("CustomFieldSetupId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DataType");

                    b.HasIndex("FormName");

                    b.ToTable("custom_field_setup","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.EmailQueue", b =>
                {
                    b.Property<long>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("queue_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("added_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ApplicationName")
                        .HasColumnName("application_name")
                        .HasMaxLength(256);

                    b.Property<string>("Attachments")
                        .HasColumnName("attachments")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Canceled")
                        .HasColumnName("canceled");

                    b.Property<DateTimeOffset?>("CanceledOn")
                        .HasColumnName("canceled_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Delivered")
                        .HasColumnName("delivered");

                    b.Property<DateTimeOffset?>("DeliveredOn")
                        .HasColumnName("delivered_on");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnName("from_email")
                        .HasMaxLength(256);

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnName("from_name")
                        .HasMaxLength(256);

                    b.Property<bool>("IsTest")
                        .HasColumnName("is_test");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message");

                    b.Property<string>("ReplyTo")
                        .IsRequired()
                        .HasColumnName("reply_to")
                        .HasMaxLength(256);

                    b.Property<string>("ReplyToName")
                        .IsRequired()
                        .HasColumnName("reply_to_name")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset>("SendOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("send_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("SendTo")
                        .IsRequired()
                        .HasColumnName("send_to")
                        .HasMaxLength(256);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(256);

                    b.HasKey("QueueId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("email_queue","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.Filter", b =>
                {
                    b.Property<long>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filter_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnName("column_name")
                        .HasMaxLength(500);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("data_type")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(500);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FilterAndValue")
                        .HasColumnName("filter_and_value")
                        .HasMaxLength(500);

                    b.Property<int>("FilterCondition")
                        .HasColumnName("filter_condition");

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasColumnName("filter_name")
                        .HasMaxLength(500);

                    b.Property<string>("FilterStatement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filter_statement")
                        .HasDefaultValueSql("('WHERE')")
                        .HasMaxLength(12);

                    b.Property<string>("FilterValue")
                        .HasColumnName("filter_value")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDefaultAdmin")
                        .HasColumnName("is_default_admin");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnName("object_name")
                        .HasMaxLength(500);

                    b.HasKey("FilterId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ObjectName")
                        .HasName("filters_object_name_inx")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("filters","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.Kanban", b =>
                {
                    b.Property<long>("KanbanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kanban_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("KanbanName")
                        .IsRequired()
                        .HasColumnName("kanban_name")
                        .HasMaxLength(128);

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnName("object_name")
                        .HasMaxLength(128);

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("KanbanId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UserId");

                    b.ToTable("kanbans","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.KanbanDetail", b =>
                {
                    b.Property<long>("KanbanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("kanban_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("KanbanId")
                        .HasColumnName("kanban_id");

                    b.Property<short?>("Rating")
                        .HasColumnName("rating");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnName("resource_id")
                        .HasMaxLength(128);

                    b.HasKey("KanbanDetailId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("KanbanId", "ResourceId")
                        .IsUnique()
                        .HasName("kanban_details_kanban_id_resource_id_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("kanban_details","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.SmsQueue", b =>
                {
                    b.Property<long>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("queue_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("added_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("ApplicationName")
                        .HasColumnName("application_name")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Canceled")
                        .HasColumnName("canceled");

                    b.Property<DateTimeOffset?>("CanceledOn")
                        .HasColumnName("canceled_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Delivered")
                        .HasColumnName("delivered");

                    b.Property<DateTimeOffset?>("DeliveredOn")
                        .HasColumnName("delivered_on");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnName("from_name")
                        .HasMaxLength(256);

                    b.Property<string>("FromNumber")
                        .IsRequired()
                        .HasColumnName("from_number")
                        .HasMaxLength(256);

                    b.Property<bool>("IsTest")
                        .HasColumnName("is_test");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message");

                    b.Property<DateTimeOffset>("SendOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("send_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("SendTo")
                        .IsRequired()
                        .HasColumnName("send_to")
                        .HasMaxLength(256);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(256);

                    b.HasKey("QueueId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("sms_queue","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.SmtpConfig", b =>
                {
                    b.Property<int>("SmtpConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("smtp_config_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("ConfigurationName")
                        .IsRequired()
                        .HasColumnName("configuration_name")
                        .HasMaxLength(256);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("FromDisplayName")
                        .IsRequired()
                        .HasColumnName("from_display_name")
                        .HasMaxLength(256);

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasColumnName("from_email_address")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDefault")
                        .HasColumnName("is_default");

                    b.Property<bool?>("SmtpEnableSsl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("smtp_enable_ssl")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("SmtpHost")
                        .IsRequired()
                        .HasColumnName("smtp_host")
                        .HasMaxLength(256);

                    b.Property<string>("SmtpPassword")
                        .IsRequired()
                        .HasColumnName("smtp_password")
                        .HasMaxLength(256);

                    b.Property<int>("SmtpPort")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("smtp_port")
                        .HasDefaultValueSql("((587))");

                    b.Property<string>("SmtpUsername")
                        .IsRequired()
                        .HasColumnName("smtp_username")
                        .HasMaxLength(256);

                    b.HasKey("SmtpConfigId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ConfigurationName")
                        .IsUnique()
                        .HasName("UQ__smtp_con__8F784E0F0B1E5676");

                    b.ToTable("smtp_configs","config");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.App", b =>
                {
                    b.Property<string>("AppName")
                        .HasColumnName("app_name")
                        .HasMaxLength(100);

                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("I18nKey")
                        .IsRequired()
                        .HasColumnName("i18n_key")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasColumnName("icon");

                    b.Property<string>("LandingUrl")
                        .HasColumnName("landing_url")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnName("published_on")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasColumnName("publisher")
                        .HasMaxLength(500);

                    b.Property<string>("VersionNumber")
                        .HasColumnName("version_number")
                        .HasMaxLength(100);

                    b.HasKey("AppName");

                    b.HasIndex("AppName")
                        .IsUnique()
                        .HasName("apps_app_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("apps","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.AppDependency", b =>
                {
                    b.Property<int>("AppDependencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("app_dependency_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .HasColumnName("app_name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DependsOn")
                        .HasColumnName("depends_on")
                        .HasMaxLength(100);

                    b.HasKey("AppDependencyId");

                    b.HasIndex("AppName");

                    b.HasIndex("DependsOn");

                    b.ToTable("app_dependencies","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("country_name")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CountryCode");

                    b.ToTable("countries","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("currency_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnName("currency_name")
                        .HasMaxLength(48);

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnName("currency_symbol")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HundredthName")
                        .IsRequired()
                        .HasColumnName("hundredth_name")
                        .HasMaxLength(48);

                    b.HasKey("CurrencyCode");

                    b.HasIndex("CurrencyName")
                        .IsUnique()
                        .HasName("UQ__currenci__EC6E104DA3081EAE");

                    b.ToTable("currencies","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Gender", b =>
                {
                    b.Property<string>("GenderCode")
                        .HasColumnName("gender_code")
                        .HasMaxLength(4);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnName("gender_name")
                        .HasMaxLength(50);

                    b.HasKey("GenderCode");

                    b.HasIndex("GenderName")
                        .IsUnique()
                        .HasName("UQ__genders__2FB51D273F89A0CA");

                    b.ToTable("genders","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("marital_status_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsLegallyRecognizedMarriage")
                        .HasColumnName("is_legally_recognized_marriage");

                    b.Property<string>("MaritalStatusCode")
                        .IsRequired()
                        .HasColumnName("marital_status_code")
                        .HasMaxLength(12);

                    b.Property<string>("MaritalStatusName")
                        .IsRequired()
                        .HasColumnName("marital_status_name")
                        .HasMaxLength(128);

                    b.HasKey("MaritalStatusId");

                    b.HasIndex("MaritalStatusCode")
                        .IsUnique()
                        .HasName("UQ__marital___507BD4B59992DFB0");

                    b.ToTable("marital_statuses","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnName("app_name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("I18nKey")
                        .IsRequired()
                        .HasColumnName("i18n_key")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasMaxLength(100);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnName("menu_name")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentMenuId")
                        .HasColumnName("parent_menu_id");

                    b.Property<int?>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(500);

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.HasIndex("AppName", "MenuName")
                        .IsUnique()
                        .HasName("menus_app_name_menu_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("menus","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AssociatedApp")
                        .IsRequired()
                        .HasColumnName("associated_app")
                        .HasMaxLength(100);

                    b.Property<int?>("AssociatedMenuId")
                        .HasColumnName("associated_menu_id");

                    b.Property<DateTimeOffset>("EventTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("event_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("FormattedText")
                        .HasColumnName("formatted_text")
                        .HasMaxLength(4000);

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasMaxLength(100);

                    b.Property<int?>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("Tenant")
                        .HasColumnName("tenant")
                        .HasMaxLength(1000);

                    b.Property<long?>("ToLoginId")
                        .HasColumnName("to_login_id");

                    b.Property<int?>("ToRoleId")
                        .HasColumnName("to_role_id");

                    b.Property<int?>("ToUserId")
                        .HasColumnName("to_user_id");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(2000);

                    b.HasKey("NotificationId");

                    b.HasIndex("AssociatedApp");

                    b.HasIndex("AssociatedMenuId");

                    b.HasIndex("OfficeId");

                    b.ToTable("notifications","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.NotificationStatus", b =>
                {
                    b.Property<Guid>("NotificationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_status_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("LastSeenOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_seen_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<Guid>("NotificationId")
                        .HasColumnName("notification_id");

                    b.Property<int>("SeenBy")
                        .HasColumnName("seen_by");

                    b.HasKey("NotificationStatusId");

                    b.HasIndex("NotificationId");

                    b.ToTable("notification_statuses","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("office_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(128);

                    b.Property<bool>("AllowTransactionPosting")
                        .HasColumnName("allow_transaction_posting");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(128);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(24);

                    b.Property<byte[]>("Logo")
                        .HasColumnName("logo");

                    b.Property<string>("NickName")
                        .HasColumnName("nick_name")
                        .HasMaxLength(50);

                    b.Property<string>("OfficeCode")
                        .IsRequired()
                        .HasColumnName("office_code")
                        .HasMaxLength(12);

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnName("office_name")
                        .HasMaxLength(150);

                    b.Property<string>("PanNumber")
                        .HasColumnName("pan_number")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentOfficeId")
                        .HasColumnName("parent_office_id");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(24);

                    b.Property<string>("PoBox")
                        .HasColumnName("po_box")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnName("registration_date")
                        .HasColumnType("date");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("registration_number")
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(50);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasMaxLength(24);

                    b.HasKey("OfficeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ParentOfficeId");

                    b.ToTable("offices","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.VerificationStatus", b =>
                {
                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("VerificationStatusName")
                        .IsRequired()
                        .HasColumnName("verification_status_name")
                        .HasMaxLength(128);

                    b.HasKey("VerificationStatusId");

                    b.ToTable("verification_statuses","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.WeekDay", b =>
                {
                    b.Property<int>("WeekDayId")
                        .HasColumnName("week_day_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("WeekDayCode")
                        .IsRequired()
                        .HasColumnName("week_day_code")
                        .HasMaxLength(12);

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasColumnName("week_day_name")
                        .HasMaxLength(50);

                    b.HasKey("WeekDayId");

                    b.HasIndex("WeekDayCode")
                        .IsUnique()
                        .HasName("UQ__week_day__2FE49F53C8CB710A");

                    b.HasIndex("WeekDayName")
                        .IsUnique()
                        .HasName("UQ__week_day__D111B99E661B0F31");

                    b.ToTable("week_days","core");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("account_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccountMasterId")
                        .HasColumnName("account_master_id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("account_name")
                        .HasMaxLength(500);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnName("account_number")
                        .HasMaxLength(24);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Confidential")
                        .HasColumnName("confidential");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(1000);

                    b.Property<string>("ExternalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("external_code")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(24);

                    b.Property<bool?>("IsTransactionNode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_transaction_node")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ParentAccountId")
                        .HasColumnName("parent_account_id");

                    b.Property<bool>("SysType")
                        .HasColumnName("sys_type");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountMasterId");

                    b.HasIndex("AccountName")
                        .IsUnique()
                        .HasName("accounts_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("accounts_account_number_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("accounts","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.AccountMaster", b =>
                {
                    b.Property<short>("AccountMasterId")
                        .HasColumnName("account_master_id");

                    b.Property<string>("AccountMasterCode")
                        .IsRequired()
                        .HasColumnName("account_master_code")
                        .HasMaxLength(3);

                    b.Property<string>("AccountMasterName")
                        .IsRequired()
                        .HasColumnName("account_master_name")
                        .HasMaxLength(40);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("NormallyDebit")
                        .HasColumnName("normally_debit");

                    b.Property<short?>("ParentAccountMasterId")
                        .HasColumnName("parent_account_master_id");

                    b.HasKey("AccountMasterId");

                    b.HasIndex("AccountMasterCode")
                        .IsUnique()
                        .HasName("account_master_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AccountMasterName")
                        .IsUnique()
                        .HasName("account_master_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ParentAccountMasterId")
                        .HasName("account_master_parent_account_master_id_inx")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("account_masters","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.AutoVerificationPolicy", b =>
                {
                    b.Property<int>("AutoVerificationPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("auto_verification_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnName("effective_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndsOn")
                        .HasColumnName("ends_on")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<decimal>("VerificationLimit")
                        .HasColumnName("verification_limit")
                        .HasColumnType("numeric(30, 6)");

                    b.HasKey("AutoVerificationPolicyId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("auto_verification_policy","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_account_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnName("bank_account_name")
                        .HasMaxLength(1000);

                    b.Property<string>("BankAccountNumber")
                        .HasColumnName("bank_account_number")
                        .HasMaxLength(128);

                    b.Property<string>("BankAccountType")
                        .HasColumnName("bank_account_type")
                        .HasMaxLength(128);

                    b.Property<string>("BankBranch")
                        .IsRequired()
                        .HasColumnName("bank_branch")
                        .HasMaxLength(128);

                    b.Property<string>("BankContactNumber")
                        .HasColumnName("bank_contact_number")
                        .HasMaxLength(128);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnName("bank_name")
                        .HasMaxLength(128);

                    b.Property<int>("BankTypeId")
                        .HasColumnName("bank_type_id");

                    b.Property<string>("Cell")
                        .HasColumnName("cell")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMerchantAccount")
                        .HasColumnName("is_merchant_account");

                    b.Property<int>("MaintainedByUserId")
                        .HasColumnName("maintained_by_user_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("RelationshipOfficerContactNumber")
                        .HasColumnName("relationship_officer_contact_number")
                        .HasMaxLength(128);

                    b.Property<string>("RelationshipOfficerName")
                        .HasColumnName("relationship_officer_name")
                        .HasMaxLength(128);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(50);

                    b.HasKey("BankAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("BankTypeId");

                    b.HasIndex("MaintainedByUserId");

                    b.HasIndex("OfficeId");

                    b.ToTable("bank_accounts","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.BankType", b =>
                {
                    b.Property<int>("BankTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BankTypeName")
                        .HasColumnName("bank_type_name")
                        .HasMaxLength(1000);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("BankTypeId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("bank_types","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CardType", b =>
                {
                    b.Property<int>("CardTypeId")
                        .HasColumnName("card_type_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CardTypeCode")
                        .IsRequired()
                        .HasColumnName("card_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnName("card_type_name")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CardTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CardTypeCode")
                        .IsUnique()
                        .HasName("card_types_card_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CardTypeName")
                        .IsUnique()
                        .HasName("card_types_card_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("card_types","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashFlowHeading", b =>
                {
                    b.Property<int>("CashFlowHeadingId")
                        .HasColumnName("cash_flow_heading_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CashFlowHeadingCode")
                        .IsRequired()
                        .HasColumnName("cash_flow_heading_code")
                        .HasMaxLength(12);

                    b.Property<string>("CashFlowHeadingName")
                        .IsRequired()
                        .HasColumnName("cash_flow_heading_name")
                        .HasMaxLength(100);

                    b.Property<string>("CashFlowHeadingType")
                        .IsRequired()
                        .HasColumnName("cash_flow_heading_type")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsDebit")
                        .HasColumnName("is_debit");

                    b.Property<bool>("IsPurchase")
                        .HasColumnName("is_purchase");

                    b.Property<bool>("IsSales")
                        .HasColumnName("is_sales");

                    b.HasKey("CashFlowHeadingId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashFlowHeadingCode")
                        .IsUnique()
                        .HasName("cash_flow_headings_cash_flow_heading_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("cash_flow_headings","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashFlowSetup", b =>
                {
                    b.Property<int>("CashFlowSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cash_flow_setup_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AccountMasterId")
                        .HasColumnName("account_master_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CashFlowHeadingId")
                        .HasColumnName("cash_flow_heading_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CashFlowSetupId");

                    b.HasIndex("AccountMasterId")
                        .HasName("cash_flow_setup_account_master_id_inx")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashFlowHeadingId")
                        .HasName("cash_flow_setup_cash_flow_heading_id_inx")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("cash_flow_setup","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashRepository", b =>
                {
                    b.Property<int>("CashRepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cash_repository_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CashRepositoryCode")
                        .IsRequired()
                        .HasColumnName("cash_repository_code")
                        .HasMaxLength(12);

                    b.Property<string>("CashRepositoryName")
                        .IsRequired()
                        .HasColumnName("cash_repository_name")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int?>("ParentCashRepositoryId")
                        .HasColumnName("parent_cash_repository_id");

                    b.HasKey("CashRepositoryId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ParentCashRepositoryId");

                    b.HasIndex("OfficeId", "CashRepositoryCode")
                        .IsUnique()
                        .HasName("cash_repositories_cash_repository_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("OfficeId", "CashRepositoryName")
                        .IsUnique()
                        .HasName("cash_repositories_cash_repository_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("cash_repositories","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CostCenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cost_center_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CostCenterCode")
                        .IsRequired()
                        .HasColumnName("cost_center_code")
                        .HasMaxLength(24);

                    b.Property<string>("CostCenterName")
                        .IsRequired()
                        .HasColumnName("cost_center_name")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CostCenterId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CostCenterCode")
                        .IsUnique()
                        .HasName("cost_centers_cost_center_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CostCenterName")
                        .IsUnique()
                        .HasName("cost_centers_cost_center_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("cost_centers","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.DayOperation", b =>
                {
                    b.Property<long>("DayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("day_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnName("completed");

                    b.Property<int?>("CompletedBy")
                        .HasColumnName("completed_by");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnName("completed_on");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("StartedBy")
                        .HasColumnName("started_by");

                    b.Property<DateTimeOffset>("StartedOn")
                        .HasColumnName("started_on");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("DayId");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("CompletedOn")
                        .HasName("day_operation_completed_on_inx");

                    b.HasIndex("OfficeId");

                    b.HasIndex("StartedBy");

                    b.HasIndex("ValueDate")
                        .IsUnique()
                        .HasName("day_operation_value_date_uix");

                    b.ToTable("day_operation","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.DayOperationRoutine", b =>
                {
                    b.Property<long>("DayOperationRoutineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("day_operation_routine_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnName("completed_on");

                    b.Property<long>("DayId")
                        .HasColumnName("day_id");

                    b.Property<int>("RoutineId")
                        .HasColumnName("routine_id");

                    b.Property<DateTimeOffset>("StartedOn")
                        .HasColumnName("started_on");

                    b.HasKey("DayOperationRoutineId");

                    b.HasIndex("CompletedOn")
                        .HasName("day_operation_routines_completed_on_inx");

                    b.HasIndex("DayId");

                    b.HasIndex("RoutineId");

                    b.HasIndex("StartedOn")
                        .HasName("day_operation_routines_started_on_inx");

                    b.ToTable("day_operation_routines","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.ExchangeRate", b =>
                {
                    b.Property<long>("ExchangeRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exchange_rate_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("OfficeId");

                    b.ToTable("exchange_rates","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.ExchangeRateDetail", b =>
                {
                    b.Property<long>("ExchangeRateDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exchange_rate_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnName("exchange_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("ExchangeRateId")
                        .HasColumnName("exchange_rate_id");

                    b.Property<string>("ForeignCurrencyCode")
                        .IsRequired()
                        .HasColumnName("foreign_currency_code")
                        .HasMaxLength(12);

                    b.Property<string>("LocalCurrencyCode")
                        .IsRequired()
                        .HasColumnName("local_currency_code")
                        .HasMaxLength(12);

                    b.Property<int>("Unit")
                        .HasColumnName("unit");

                    b.HasKey("ExchangeRateDetailId");

                    b.HasIndex("ExchangeRateId");

                    b.HasIndex("ForeignCurrencyCode");

                    b.HasIndex("LocalCurrencyCode");

                    b.ToTable("exchange_rate_details","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.FiscalYear", b =>
                {
                    b.Property<string>("FiscalYearCode")
                        .HasColumnName("fiscal_year_code")
                        .HasMaxLength(12);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("EndsOn")
                        .HasColumnName("ends_on")
                        .HasColumnType("date");

                    b.Property<bool?>("EodRequired")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("eod_required")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("FiscalYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fiscal_year_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FiscalYearName")
                        .IsRequired()
                        .HasColumnName("fiscal_year_name")
                        .HasMaxLength(50);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<DateTime>("StartsFrom")
                        .HasColumnName("starts_from")
                        .HasColumnType("date");

                    b.HasKey("FiscalYearCode");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EndsOn")
                        .IsUnique()
                        .HasName("fiscal_year_ends_on_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("FiscalYearId")
                        .IsUnique()
                        .HasName("UQ__fiscal_y__6F913C0CFAF278F6");

                    b.HasIndex("FiscalYearName")
                        .IsUnique()
                        .HasName("fiscal_year_fiscal_year_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("OfficeId");

                    b.HasIndex("StartsFrom")
                        .IsUnique()
                        .HasName("fiscal_year_starts_from_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("fiscal_year","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.Frequency", b =>
                {
                    b.Property<int>("FrequencyId")
                        .HasColumnName("frequency_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FrequencyCode")
                        .IsRequired()
                        .HasColumnName("frequency_code")
                        .HasMaxLength(12);

                    b.Property<string>("FrequencyName")
                        .IsRequired()
                        .HasColumnName("frequency_name")
                        .HasMaxLength(50);

                    b.HasKey("FrequencyId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("FrequencyCode")
                        .IsUnique()
                        .HasName("frequencies_frequency_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("FrequencyName")
                        .IsUnique()
                        .HasName("frequencies_frequency_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("frequencies","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.FrequencySetup", b =>
                {
                    b.Property<int>("FrequencySetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("frequency_setup_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FiscalYearCode")
                        .IsRequired()
                        .HasColumnName("fiscal_year_code")
                        .HasMaxLength(12);

                    b.Property<int>("FrequencyId")
                        .HasColumnName("frequency_id");

                    b.Property<string>("FrequencySetupCode")
                        .IsRequired()
                        .HasColumnName("frequency_setup_code")
                        .HasMaxLength(12);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("FrequencySetupId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("FiscalYearCode");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("FrequencySetupCode")
                        .IsUnique()
                        .HasName("frequency_setups_frequency_setup_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ValueDate")
                        .IsUnique()
                        .HasName("UQ__frequenc__43469440FE9D4604");

                    b.ToTable("frequency_setups","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.JournalVerificationPolicy", b =>
                {
                    b.Property<int>("JournalVerificationPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("journal_verification_policy_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("CanSelfVerify")
                        .HasColumnName("can_self_verify");

                    b.Property<bool>("CanVerify")
                        .HasColumnName("can_verify");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnName("effective_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("EndsOn")
                        .HasColumnName("ends_on")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<decimal>("SelfVerificationLimit")
                        .HasColumnName("self_verification_limit")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<decimal>("VerificationLimit")
                        .HasColumnName("verification_limit")
                        .HasColumnType("numeric(30, 6)");

                    b.HasKey("JournalVerificationPolicyId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("journal_verification_policy","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.MerchantFeeSetup", b =>
                {
                    b.Property<int>("MerchantFeeSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("merchant_fee_setup_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("CustomerPaysFee")
                        .HasColumnName("customer_pays_fee");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("MerchantAccountId")
                        .HasColumnName("merchant_account_id");

                    b.Property<int>("PaymentCardId")
                        .HasColumnName("payment_card_id");

                    b.Property<decimal>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("StatementReference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statement_reference")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(2000);

                    b.HasKey("MerchantFeeSetupId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("PaymentCardId");

                    b.HasIndex("MerchantAccountId", "PaymentCardId")
                        .IsUnique()
                        .HasName("merchant_fee_setup_merchant_account_id_payment_card_id_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("merchant_fee_setup","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.PaymentCard", b =>
                {
                    b.Property<int>("PaymentCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_card_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CardTypeId")
                        .HasColumnName("card_type_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PaymentCardCode")
                        .IsRequired()
                        .HasColumnName("payment_card_code")
                        .HasMaxLength(12);

                    b.Property<string>("PaymentCardName")
                        .IsRequired()
                        .HasColumnName("payment_card_name")
                        .HasMaxLength(100);

                    b.HasKey("PaymentCardId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("PaymentCardCode")
                        .IsUnique()
                        .HasName("payment_cards_payment_card_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("PaymentCardName")
                        .IsUnique()
                        .HasName("payment_cards_payment_card_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("payment_cards","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.Routine", b =>
                {
                    b.Property<int>("RoutineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("routine_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<string>("RoutineCode")
                        .IsRequired()
                        .HasColumnName("routine_code")
                        .HasMaxLength(48);

                    b.Property<string>("RoutineName")
                        .IsRequired()
                        .HasColumnName("routine_name")
                        .HasMaxLength(128);

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RoutineId");

                    b.HasIndex("RoutineCode")
                        .IsUnique()
                        .HasName("routines_routine_code_uix");

                    b.HasIndex("RoutineName")
                        .IsUnique()
                        .HasName("UQ__routines__380179507C05F3EA");

                    b.ToTable("routines","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TaxSetup", b =>
                {
                    b.Property<int>("TaxSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tax_setup_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("IncomeTaxAccountId")
                        .HasColumnName("income_tax_account_id");

                    b.Property<decimal>("IncomeTaxRate")
                        .HasColumnName("income_tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("SalesTaxAccountId")
                        .HasColumnName("sales_tax_account_id");

                    b.Property<decimal>("SalesTaxRate")
                        .HasColumnName("sales_tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.HasKey("TaxSetupId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("IncomeTaxAccountId");

                    b.HasIndex("OfficeId")
                        .IsUnique()
                        .HasName("tax_setup_office_id_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("SalesTaxAccountId");

                    b.ToTable("tax_setups","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionDetail", b =>
                {
                    b.Property<long>("TransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<decimal>("AmountInCurrency")
                        .HasColumnName("amount_in_currency")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("AmountInLocalCurrency")
                        .HasColumnName("amount_in_local_currency")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime>("BookDate")
                        .HasColumnName("book_date")
                        .HasColumnType("date");

                    b.Property<int?>("CashRepositoryId")
                        .HasColumnName("cash_repository_id");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<decimal>("Er")
                        .HasColumnName("er")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("LocalCurrencyCode")
                        .IsRequired()
                        .HasColumnName("local_currency_code")
                        .HasMaxLength(12);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("ReconciliationMemo")
                        .HasColumnName("reconciliation_memo")
                        .HasMaxLength(2000);

                    b.Property<string>("StatementReference")
                        .HasColumnName("statement_reference")
                        .HasMaxLength(2000);

                    b.Property<string>("TranType")
                        .IsRequired()
                        .HasColumnName("tran_type")
                        .HasMaxLength(4);

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("TransactionDetailId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashRepositoryId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("LocalCurrencyCode");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TransactionMasterId", "AmountInLocalCurrency", "TranType")
                        .HasName("transaction_details_tran_type_inx");

                    b.HasIndex("TransactionMasterId", "TranType", "AmountInLocalCurrency", "AccountId")
                        .HasName("transaction_details_account_id_inx");

                    b.HasIndex("TransactionMasterId", "TranType", "AmountInLocalCurrency", "BookDate")
                        .HasName("transaction_details_book_date_inx");

                    b.HasIndex("TransactionMasterId", "TranType", "AmountInLocalCurrency", "CashRepositoryId")
                        .HasName("transaction_details_cash_repository_id_inx");

                    b.HasIndex("TransactionMasterId", "TranType", "AmountInLocalCurrency", "OfficeId")
                        .HasName("transaction_details_office_id_inx");

                    b.HasIndex("TransactionMasterId", "TranType", "AmountInLocalCurrency", "ValueDate")
                        .HasName("transaction_details_value_date_inx");

                    b.ToTable("transaction_details","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionDocument", b =>
                {
                    b.Property<long>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("document_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FileExtension")
                        .HasColumnName("file_extension")
                        .HasMaxLength(50);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnName("file_path")
                        .HasMaxLength(2000);

                    b.Property<string>("Memo")
                        .HasColumnName("memo")
                        .HasMaxLength(2000);

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnName("original_file_name")
                        .HasMaxLength(500);

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.HasKey("DocumentId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("TransactionMasterId");

                    b.ToTable("transaction_documents","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionMaster", b =>
                {
                    b.Property<long>("TransactionMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_master_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Book")
                        .IsRequired()
                        .HasColumnName("book")
                        .HasMaxLength(50);

                    b.Property<DateTime>("BookDate")
                        .HasColumnName("book_date")
                        .HasColumnType("date");

                    b.Property<long?>("CascadingTranId")
                        .HasColumnName("cascading_tran_id");

                    b.Property<int?>("CostCenterId")
                        .HasColumnName("cost_center_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset?>("LastVerifiedOn")
                        .HasColumnName("last_verified_on");

                    b.Property<long>("LoginId")
                        .HasColumnName("login_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<string>("StatementReference")
                        .HasColumnName("statement_reference")
                        .HasMaxLength(2000);

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnName("transaction_code")
                        .HasMaxLength(50);

                    b.Property<int>("TransactionCounter")
                        .HasColumnName("transaction_counter");

                    b.Property<DateTimeOffset>("TransactionTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.Property<string>("VerificationReason")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("verification_reason")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.HasKey("TransactionMasterId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("BookDate")
                        .HasName("transaction_master_book_date_inx")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CascadingTranId")
                        .HasName("transaction_master_cascading_tran_id_inx")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("LoginId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TransactionCode")
                        .IsUnique()
                        .HasName("transaction_master_transaction_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("UserId");

                    b.HasIndex("ValueDate")
                        .HasName("transaction_master_value_date_inx")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("transaction_master","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionType", b =>
                {
                    b.Property<short>("TransactionTypeId")
                        .HasColumnName("transaction_type_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TransactionTypeCode")
                        .HasColumnName("transaction_type_code")
                        .HasMaxLength(4);

                    b.Property<string>("TransactionTypeName")
                        .HasColumnName("transaction_type_name")
                        .HasMaxLength(100);

                    b.HasKey("TransactionTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("TransactionTypeCode")
                        .IsUnique()
                        .HasName("transaction_types_transaction_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("TransactionTypeName")
                        .IsUnique()
                        .HasName("transaction_types_transaction_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("transaction_types","finance");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Attendance", b =>
                {
                    b.Property<long>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("attendance_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnName("attendance_date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<TimeSpan?>("CheckInTime")
                        .HasColumnName("check_in_time");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .HasColumnName("check_out_time");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<decimal>("OvertimeHours")
                        .HasColumnName("overtime_hours")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("ReasonForAbsenteeism")
                        .HasColumnName("reason_for_absenteeism")
                        .HasMaxLength(1000);

                    b.Property<bool>("WasAbsent")
                        .HasColumnName("was_absent");

                    b.Property<bool>("WasPresent")
                        .HasColumnName("was_present");

                    b.HasKey("AttendanceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("AttendanceDate", "EmployeeId")
                        .IsUnique()
                        .HasName("attendance_date_employee_id_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("attendances","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Contract", b =>
                {
                    b.Property<long>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contract_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime?>("BeganOn")
                        .HasColumnName("began_on")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("department_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<int>("EmploymentStatusCodeId")
                        .HasColumnName("employment_status_code_id");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnName("ended_on")
                        .HasColumnType("date");

                    b.Property<int?>("LeaveBenefitId")
                        .HasColumnName("leave_benefit_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<string>("VerificationReason")
                        .HasColumnName("verification_reason")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnName("verified_on")
                        .HasColumnType("date");

                    b.HasKey("ContractId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentStatusCodeId");

                    b.HasIndex("LeaveBenefitId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("contracts","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("department_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnName("department_code")
                        .HasMaxLength(12);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnName("department_name")
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DepartmentCode")
                        .IsUnique()
                        .HasName("departments_department_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("DepartmentName")
                        .IsUnique()
                        .HasName("departments_department_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("departments","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("education_level_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EducationLevelName")
                        .IsRequired()
                        .HasColumnName("education_level_name")
                        .HasMaxLength(50);

                    b.HasKey("EducationLevelId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EducationLevelName")
                        .IsUnique()
                        .HasName("education_levels_education_level_name")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("education_levels","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_line_1")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("AddressLine2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_line_2")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BankAccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_account_number")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("BankBranchName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_branch_name")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("BankName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_name")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("BankReferenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bank_reference_number")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("Blog")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blog")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("city")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasMaxLength(12);

                    b.Property<int>("CurrentDepartmentId")
                        .HasColumnName("current_department_id");

                    b.Property<int>("CurrentEmploymentStatusId")
                        .HasColumnName("current_employment_status_id");

                    b.Property<int>("CurrentJobTitleId")
                        .HasColumnName("current_job_title_id");

                    b.Property<int>("CurrentPayGradeId")
                        .HasColumnName("current_pay_grade_id");

                    b.Property<int?>("CurrentRoleId")
                        .HasColumnName("current_role_id");

                    b.Property<int>("CurrentShiftId")
                        .HasColumnName("current_shift_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmailAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_address")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnName("employee_code")
                        .HasMaxLength(12);

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnName("employee_name")
                        .HasMaxLength(160);

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnName("employee_type_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(50);

                    b.Property<string>("GenderCode")
                        .IsRequired()
                        .HasColumnName("gender_code")
                        .HasMaxLength(4);

                    b.Property<bool?>("HardOfHearing")
                        .HasColumnName("hard_of_hearing");

                    b.Property<bool?>("IsAlcoholic")
                        .HasColumnName("is_alcoholic");

                    b.Property<bool?>("IsAphonic")
                        .HasColumnName("is_aphonic");

                    b.Property<bool?>("IsAutistic")
                        .HasColumnName("is_autistic");

                    b.Property<bool?>("IsCognitivelyDisabled")
                        .HasColumnName("is_cognitively_disabled");

                    b.Property<bool?>("IsSmoker")
                        .HasColumnName("is_smoker");

                    b.Property<DateTime?>("JoinedOn")
                        .HasColumnName("joined_on")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_name")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<bool?>("LowVision")
                        .HasColumnName("low_vision");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnName("marital_status_id");

                    b.Property<string>("MiddleName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("middle_name")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<int?>("NationalityId")
                        .HasColumnName("nationality_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("PhoneCell")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_cell")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_emergency")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneEmergency2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_emergency_2")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneHome")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_home")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneOfficeExtension")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone_office_extension")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo");

                    b.Property<DateTime?>("ServiceEndedOn")
                        .HasColumnName("service_ended_on")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("state")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<string>("Street")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("street")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.Property<bool?>("UsesWheelchair")
                        .HasColumnName("uses_wheelchair");

                    b.Property<string>("Website")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("website")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<bool?>("WithDisabilities")
                        .HasColumnName("with_disabilities");

                    b.Property<string>("ZipCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("zip_code")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.HasKey("EmployeeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CountryCode");

                    b.HasIndex("CurrentDepartmentId");

                    b.HasIndex("CurrentEmploymentStatusId");

                    b.HasIndex("CurrentJobTitleId");

                    b.HasIndex("CurrentPayGradeId");

                    b.HasIndex("CurrentRoleId");

                    b.HasIndex("CurrentShiftId");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasName("employees_employee_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("GenderCode");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("employees","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeExperience", b =>
                {
                    b.Property<long>("EmployeeExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_experience_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(1000);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnName("ended_on")
                        .HasColumnType("date");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnName("organization_name")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnName("started_on")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(128);

                    b.HasKey("EmployeeExperienceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_experiences","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeIdentificationDetail", b =>
                {
                    b.Property<long>("EmployeeIdentificationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_identification_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnName("expires_on")
                        .HasColumnType("date");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnName("identification_number")
                        .HasMaxLength(128);

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnName("identification_type_id");

                    b.HasKey("EmployeeIdentificationDetailId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("EmployeeId", "IdentificationTypeId")
                        .IsUnique()
                        .HasName("employee_identification_details_employee_id_itc_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("employee_identification_details","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeQualification", b =>
                {
                    b.Property<long>("EmployeeQualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_qualification_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnName("completed_on")
                        .HasColumnType("date");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(1000);

                    b.Property<int>("EducationLevelId")
                        .HasColumnName("education_level_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnName("institution")
                        .HasMaxLength(128);

                    b.Property<string>("Majors")
                        .IsRequired()
                        .HasColumnName("majors")
                        .HasMaxLength(128);

                    b.Property<decimal?>("Score")
                        .HasColumnName("score")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnName("started_on")
                        .HasColumnType("date");

                    b.Property<int?>("TotalYears")
                        .HasColumnName("total_years");

                    b.HasKey("EmployeeQualificationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employee_qualifications","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeSocialNetworkDetail", b =>
                {
                    b.Property<long>("EmployeeSocialNetworkDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_social_network_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<string>("ProfileLink")
                        .IsRequired()
                        .HasColumnName("profile_link")
                        .HasMaxLength(1000);

                    b.Property<int>("SocialNetworkId")
                        .HasColumnName("social_network_id");

                    b.HasKey("EmployeeSocialNetworkDetailId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SocialNetworkId");

                    b.ToTable("employee_social_network_details","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("EmployeeTypeCode")
                        .IsRequired()
                        .HasColumnName("employee_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("EmployeeTypeName")
                        .IsRequired()
                        .HasColumnName("employee_type_name")
                        .HasMaxLength(128);

                    b.HasKey("EmployeeTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeTypeCode")
                        .IsUnique()
                        .HasName("employee_types_employee_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("EmployeeTypeName")
                        .IsUnique()
                        .HasName("employee_types_employee_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("employee_types","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmploymentStatus", b =>
                {
                    b.Property<int>("EmploymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employment_status_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("DefaultEmploymentStatusCodeId")
                        .HasColumnName("default_employment_status_code_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<string>("EmploymentStatusCode")
                        .IsRequired()
                        .HasColumnName("employment_status_code")
                        .HasMaxLength(12);

                    b.Property<string>("EmploymentStatusName")
                        .IsRequired()
                        .HasColumnName("employment_status_name")
                        .HasMaxLength(100);

                    b.Property<bool>("IsContract")
                        .HasColumnName("is_contract");

                    b.HasKey("EmploymentStatusId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DefaultEmploymentStatusCodeId");

                    b.HasIndex("EmploymentStatusCode")
                        .IsUnique()
                        .HasName("employment_statuses_employment_status_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("EmploymentStatusName")
                        .IsUnique()
                        .HasName("employment_statuses_employment_status_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("employment_statuses","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmploymentStatusCode", b =>
                {
                    b.Property<int>("EmploymentStatusCodeId")
                        .HasColumnName("employment_status_code_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnName("status_code")
                        .HasMaxLength(12);

                    b.Property<string>("StatusCodeName")
                        .IsRequired()
                        .HasColumnName("status_code_name")
                        .HasMaxLength(100);

                    b.HasKey("EmploymentStatusCodeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("StatusCode")
                        .IsUnique()
                        .HasName("employment_status_codes_status_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("StatusCodeName")
                        .IsUnique()
                        .HasName("employment_status_codes_status_code_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("employment_status_codes","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Exit", b =>
                {
                    b.Property<long>("ExitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exit_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("ChangeStatusTo")
                        .HasColumnName("change_status_to");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(1000);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<string>("ExitInterviewDetails")
                        .HasColumnName("exit_interview_details")
                        .HasMaxLength(1000);

                    b.Property<int>("ExitTypeId")
                        .HasColumnName("exit_type_id");

                    b.Property<int?>("ForwardTo")
                        .HasColumnName("forward_to");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasMaxLength(128);

                    b.Property<DateTime>("ServiceEndDate")
                        .HasColumnName("service_end_date")
                        .HasColumnType("date");

                    b.Property<string>("VerificationReason")
                        .HasColumnName("verification_reason")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnName("verified_on")
                        .HasColumnType("date");

                    b.HasKey("ExitId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ChangeStatusTo");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExitTypeId");

                    b.HasIndex("ForwardTo");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("exits","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.ExitType", b =>
                {
                    b.Property<int>("ExitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exit_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ExitTypeCode")
                        .IsRequired()
                        .HasColumnName("exit_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("ExitTypeName")
                        .IsRequired()
                        .HasColumnName("exit_type_name")
                        .HasMaxLength(128);

                    b.HasKey("ExitTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ExitTypeCode")
                        .IsUnique()
                        .HasName("exit_types_exit_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ExitTypeName")
                        .IsUnique()
                        .HasName("exit_types_exit_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("exit_types","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.IdentificationType", b =>
                {
                    b.Property<int>("IdentificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("identification_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("CanExpire")
                        .HasColumnName("can_expire");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IdentificationTypeCode")
                        .IsRequired()
                        .HasColumnName("identification_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("IdentificationTypeName")
                        .IsRequired()
                        .HasColumnName("identification_type_name")
                        .HasMaxLength(100);

                    b.HasKey("IdentificationTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("IdentificationTypeCode")
                        .IsUnique()
                        .HasName("identification_types_identification_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("IdentificationTypeName")
                        .IsUnique()
                        .HasName("identification_types_identification_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("identification_types","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("job_title_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<string>("JobTitleCode")
                        .IsRequired()
                        .HasColumnName("job_title_code")
                        .HasMaxLength(12);

                    b.Property<string>("JobTitleName")
                        .IsRequired()
                        .HasColumnName("job_title_name")
                        .HasMaxLength(100);

                    b.HasKey("JobTitleId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("JobTitleCode")
                        .IsUnique()
                        .HasName("job_titles_job_title_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("JobTitleName")
                        .IsUnique()
                        .HasName("job_titles_job_title_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("job_titles","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveApplication", b =>
                {
                    b.Property<long>("LeaveApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("leave_application_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AppliedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("applied_on")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<int>("EnteredBy")
                        .HasColumnName("entered_by");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnName("leave_type_id");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("VerificationReason")
                        .HasColumnName("verification_reason")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnName("verified_on")
                        .HasColumnType("date");

                    b.HasKey("LeaveApplicationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EnteredBy");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("leave_applications","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveBenefit", b =>
                {
                    b.Property<int>("LeaveBenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("leave_benefit_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LeaveBenefitCode")
                        .IsRequired()
                        .HasColumnName("leave_benefit_code")
                        .HasMaxLength(12);

                    b.Property<string>("LeaveBenefitName")
                        .IsRequired()
                        .HasColumnName("leave_benefit_name")
                        .HasMaxLength(128);

                    b.Property<int>("TotalDays")
                        .HasColumnName("total_days");

                    b.HasKey("LeaveBenefitId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("LeaveBenefitCode")
                        .IsUnique()
                        .HasName("leave_benefits_leave_benefit_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("LeaveBenefitName")
                        .IsUnique()
                        .HasName("leave_benefits_leave_benefit_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("leave_benefits","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveType", b =>
                {
                    b.Property<int>("LeaveTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("leave_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<string>("LeaveTypeCode")
                        .IsRequired()
                        .HasColumnName("leave_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("LeaveTypeName")
                        .IsRequired()
                        .HasColumnName("leave_type_name")
                        .HasMaxLength(100);

                    b.HasKey("LeaveTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("LeaveTypeCode")
                        .IsUnique()
                        .HasName("leave_types_leave_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("LeaveTypeName")
                        .IsUnique()
                        .HasName("leave_types_leave_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("leave_types","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nationality_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("NationalityCode")
                        .HasColumnName("nationality_code")
                        .HasMaxLength(12);

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnName("nationality_name")
                        .HasMaxLength(50);

                    b.HasKey("NationalityId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("NationalityCode")
                        .IsUnique()
                        .HasName("nationalities_nationality_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("NationalityName")
                        .IsUnique()
                        .HasName("nationalities_nationality_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("nationalities","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.OfficeHour", b =>
                {
                    b.Property<int>("OfficeHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("office_hour_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<TimeSpan>("BeginsFrom")
                        .HasColumnName("begins_from");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<TimeSpan>("EndsOn")
                        .HasColumnName("ends_on");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("ShiftId")
                        .HasColumnName("shift_id");

                    b.Property<int>("WeekDayId")
                        .HasColumnName("week_day_id");

                    b.HasKey("OfficeHourId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("WeekDayId");

                    b.ToTable("office_hours","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.PayGrade", b =>
                {
                    b.Property<int>("PayGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pay_grade_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<decimal>("MaximumSalary")
                        .HasColumnName("maximum_salary")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("MinimumSalary")
                        .HasColumnName("minimum_salary")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("PayGradeCode")
                        .IsRequired()
                        .HasColumnName("pay_grade_code")
                        .HasMaxLength(12);

                    b.Property<string>("PayGradeName")
                        .IsRequired()
                        .HasColumnName("pay_grade_name")
                        .HasMaxLength(100);

                    b.HasKey("PayGradeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("PayGradeCode")
                        .IsUnique()
                        .HasName("pay_grades_pay_grade_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("PayGradeName")
                        .IsUnique()
                        .HasName("pay_grades_pay_grade_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("pay_grades","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Resignation", b =>
                {
                    b.Property<int>("ResignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("resignation_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DesiredResignDate")
                        .HasColumnName("desired_resign_date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(1000);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<int>("EnteredBy")
                        .HasColumnName("entered_by");

                    b.Property<int?>("ForwardTo")
                        .HasColumnName("forward_to");

                    b.Property<DateTime>("NoticeDate")
                        .HasColumnName("notice_date")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasMaxLength(128);

                    b.Property<string>("VerificationReason")
                        .HasColumnName("verification_reason")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnName("verified_on")
                        .HasColumnType("date");

                    b.HasKey("ResignationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EnteredBy");

                    b.HasIndex("ForwardTo");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("resignations","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Role1", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnName("role_code")
                        .HasMaxLength(12);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("RoleCode")
                        .IsUnique()
                        .HasName("roles_role_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasName("roles_role_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("roles","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shift_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<TimeSpan>("BeginsFrom")
                        .HasColumnName("begins_from");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<TimeSpan>("EndsOn")
                        .HasColumnName("ends_on");

                    b.Property<string>("ShiftCode")
                        .IsRequired()
                        .HasColumnName("shift_code")
                        .HasMaxLength(12);

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnName("shift_name")
                        .HasMaxLength(100);

                    b.HasKey("ShiftId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ShiftCode")
                        .IsUnique()
                        .HasName("shifts_shift_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ShiftName")
                        .IsUnique()
                        .HasName("shifts_shift_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("shifts","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.SocialNetwork", b =>
                {
                    b.Property<int>("SocialNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("social_network_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BaseUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("base_url")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(128);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IconCssClass")
                        .HasColumnName("icon_css_class")
                        .HasMaxLength(128);

                    b.Property<string>("SocialNetworkName")
                        .IsRequired()
                        .HasColumnName("social_network_name")
                        .HasMaxLength(128);

                    b.HasKey("SocialNetworkId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("social_networks","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Termination", b =>
                {
                    b.Property<int>("TerminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("termination_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("ChangeStatusTo")
                        .HasColumnName("change_status_to");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(1000);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("employee_id");

                    b.Property<int?>("ForwardTo")
                        .HasColumnName("forward_to");

                    b.Property<DateTime>("NoticeDate")
                        .HasColumnName("notice_date")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnName("reason")
                        .HasMaxLength(128);

                    b.Property<DateTime>("ServiceEndDate")
                        .HasColumnName("service_end_date")
                        .HasColumnType("date");

                    b.Property<string>("VerificationReason")
                        .HasColumnName("verification_reason")
                        .HasMaxLength(128);

                    b.Property<short>("VerificationStatusId")
                        .HasColumnName("verification_status_id");

                    b.Property<int?>("VerifiedByUserId")
                        .HasColumnName("verified_by_user_id");

                    b.Property<DateTime?>("VerifiedOn")
                        .HasColumnName("verified_on")
                        .HasColumnType("date");

                    b.HasKey("TerminationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ChangeStatusTo");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasName("UQ__terminat__C52E0BA9D4C44039");

                    b.HasIndex("ForwardTo");

                    b.HasIndex("VerificationStatusId");

                    b.HasIndex("VerifiedByUserId");

                    b.ToTable("terminations","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.WeekDay1", b =>
                {
                    b.Property<int>("WeekDayId")
                        .HasColumnName("week_day_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("WeekDayCode")
                        .IsRequired()
                        .HasColumnName("week_day_code")
                        .HasMaxLength(12);

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasColumnName("week_day_name")
                        .HasMaxLength(50);

                    b.HasKey("WeekDayId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("WeekDayCode")
                        .IsUnique()
                        .HasName("week_days_week_day_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("WeekDayName")
                        .IsUnique()
                        .HasName("week_days_week_day_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("week_days","hrm");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("attribute_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeCode")
                        .IsRequired()
                        .HasColumnName("attribute_code")
                        .HasMaxLength(12);

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnName("attribute_name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("AttributeId");

                    b.HasIndex("AttributeCode")
                        .IsUnique()
                        .HasName("attributes_attribute_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AttributeName")
                        .IsUnique()
                        .HasName("attributes_attribute_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("AuditUserId");

                    b.ToTable("attributes","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasColumnName("brand_code")
                        .HasMaxLength(24);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnName("brand_name")
                        .HasMaxLength(500);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("BrandId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("BrandCode")
                        .IsUnique()
                        .HasName("brands_brand_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("BrandName")
                        .IsUnique()
                        .HasName("brands_brand_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("brands","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Checkout", b =>
                {
                    b.Property<long>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("checkout_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime>("BookDate")
                        .HasColumnName("book_date")
                        .HasColumnType("date");

                    b.Property<string>("CancellationReason")
                        .HasColumnName("cancellation_reason")
                        .HasMaxLength(1000);

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("NontaxableTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nontaxable_total")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("PostedBy")
                        .HasColumnName("posted_by");

                    b.Property<int?>("ShipperId")
                        .HasColumnName("shipper_id");

                    b.Property<decimal?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tax")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tax_rate")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("TaxableTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("taxable_total")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TransactionBook")
                        .IsRequired()
                        .HasColumnName("transaction_book")
                        .HasMaxLength(100);

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("CheckoutId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PostedBy");

                    b.HasIndex("ShipperId");

                    b.HasIndex("TransactionMasterId")
                        .HasName("checkouts_transaction_master_id_inx");

                    b.ToTable("checkouts","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CheckoutDetail", b =>
                {
                    b.Property<long>("CheckoutDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("checkout_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("base_quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("base_unit_id");

                    b.Property<DateTime>("BookDate")
                        .HasColumnName("book_date")
                        .HasColumnType("date");

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<decimal>("CostOfGoodsSold")
                        .HasColumnName("cost_of_goods_sold")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool?>("IsTaxed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_taxed")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnName("shipping_charge")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnName("transaction_type")
                        .HasMaxLength(2);

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("CheckoutDetailId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UnitId");

                    b.ToTable("checkout_details","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CompoundUnit", b =>
                {
                    b.Property<int>("CompoundUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("compound_unit_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("base_unit_id");

                    b.Property<int>("CompareUnitId")
                        .HasColumnName("compare_unit_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("Value")
                        .HasColumnName("value");

                    b.HasKey("CompoundUnitId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CompareUnitId");

                    b.HasIndex("BaseUnitId", "Value")
                        .IsUnique()
                        .HasName("compound_units_base_unit_id_value_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("compound_units","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("counter_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CounterCode")
                        .IsRequired()
                        .HasColumnName("counter_code")
                        .HasMaxLength(12);

                    b.Property<string>("CounterName")
                        .IsRequired()
                        .HasColumnName("counter_name")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.HasKey("CounterId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CounterCode")
                        .IsUnique()
                        .HasName("counters_counter_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CounterName")
                        .IsUnique()
                        .HasName("counters_counter_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("StoreId");

                    b.ToTable("counters","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CompanyAddressLine1")
                        .HasColumnName("company_address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("CompanyAddressLine2")
                        .HasColumnName("company_address_line_2")
                        .HasMaxLength(128);

                    b.Property<string>("CompanyCity")
                        .HasColumnName("company_city")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyCountry")
                        .HasColumnName("company_country")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyFax")
                        .HasColumnName("company_fax")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPhoneNumbers")
                        .HasColumnName("company_phone_numbers")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPoBox")
                        .HasColumnName("company_po_box")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyState")
                        .HasColumnName("company_state")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyStreet")
                        .HasColumnName("company_street")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyZipCode")
                        .HasColumnName("company_zip_code")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactAddressLine1")
                        .HasColumnName("contact_address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnName("contact_address_line_2")
                        .HasMaxLength(128);

                    b.Property<string>("ContactCity")
                        .HasColumnName("contact_city")
                        .HasMaxLength(100);

                    b.Property<string>("ContactCountry")
                        .HasColumnName("contact_country")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFax")
                        .HasColumnName("contact_fax")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFirstName")
                        .HasColumnName("contact_first_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastName")
                        .HasColumnName("contact_last_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleName")
                        .HasColumnName("contact_middle_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhoneNumbers")
                        .HasColumnName("contact_phone_numbers")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPoBox")
                        .HasColumnName("contact_po_box")
                        .HasMaxLength(100);

                    b.Property<string>("ContactState")
                        .HasColumnName("contact_state")
                        .HasMaxLength(100);

                    b.Property<string>("ContactStreet")
                        .HasColumnName("contact_street")
                        .HasMaxLength(100);

                    b.Property<string>("ContactZipCode")
                        .HasColumnName("contact_zip_code")
                        .HasMaxLength(100);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnName("customer_code")
                        .HasMaxLength(24);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnName("customer_name")
                        .HasMaxLength(500);

                    b.Property<int>("CustomerTypeId")
                        .HasColumnName("customer_type_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(128);

                    b.Property<byte[]>("Logo")
                        .HasColumnName("logo");

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("customers_account_id_uix")
                        .HasFilter("([deleted]=(0) AND [account_id] IS NOT NULL)");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasName("customers_customer_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("customers","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CustomerTypeCode")
                        .IsRequired()
                        .HasColumnName("customer_type_code")
                        .HasMaxLength(24);

                    b.Property<string>("CustomerTypeName")
                        .IsRequired()
                        .HasColumnName("customer_type_name")
                        .HasMaxLength(500);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CustomerTypeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerTypeCode")
                        .IsUnique()
                        .HasName("customer_types_customer_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CustomerTypeName")
                        .IsUnique()
                        .HasName("customer_types_customer_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("customer_types","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventorySetup", b =>
                {
                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<bool>("AllowMultipleOpeningInventory")
                        .HasColumnName("allow_multiple_opening_inventory");

                    b.Property<string>("CogsCalculationMethod")
                        .IsRequired()
                        .HasColumnName("cogs_calculation_method")
                        .HasMaxLength(50);

                    b.Property<int>("DefaultDiscountAccountId")
                        .HasColumnName("default_discount_account_id");

                    b.Property<string>("InventorySystem")
                        .IsRequired()
                        .HasColumnName("inventory_system")
                        .HasMaxLength(50);

                    b.Property<bool?>("UsePosCheckoutScreen")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("use_pos_checkout_screen")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("OfficeId");

                    b.HasIndex("DefaultDiscountAccountId");

                    b.ToTable("inventory_setup","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferDelivery", b =>
                {
                    b.Property<long>("InventoryTransferDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_transfer_delivery_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnName("delivery_date")
                        .HasColumnType("date");

                    b.Property<int>("DestinationStoreId")
                        .HasColumnName("destination_store_id");

                    b.Property<long>("InventoryTransferRequestId")
                        .HasColumnName("inventory_transfer_request_id");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<string>("StatementReference")
                        .HasColumnName("statement_reference")
                        .HasMaxLength(2000);

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("InventoryTransferDeliveryId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DestinationStoreId");

                    b.HasIndex("InventoryTransferRequestId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("UserId");

                    b.ToTable("inventory_transfer_deliveries","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferDeliveryDetail", b =>
                {
                    b.Property<long>("InventoryTransferDeliveryDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_transfer_delivery_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("base_quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("base_unit_id");

                    b.Property<long>("InventoryTransferDeliveryId")
                        .HasColumnName("inventory_transfer_delivery_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("request_date")
                        .HasColumnType("date");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("InventoryTransferDeliveryDetailId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("InventoryTransferDeliveryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("inventory_transfer_delivery_details","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferRequest", b =>
                {
                    b.Property<long>("InventoryTransferRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_transfer_request_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("AuthorizationReason")
                        .HasColumnName("authorization_reason")
                        .HasMaxLength(500);

                    b.Property<bool>("Authorized")
                        .HasColumnName("authorized");

                    b.Property<int?>("AuthorizedByUserId")
                        .HasColumnName("authorized_by_user_id");

                    b.Property<DateTimeOffset?>("AuthorizedOn")
                        .HasColumnName("authorized_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Delivered")
                        .HasColumnName("delivered");

                    b.Property<int?>("DeliveredByUserId")
                        .HasColumnName("delivered_by_user_id");

                    b.Property<DateTimeOffset?>("DeliveredOn")
                        .HasColumnName("delivered_on");

                    b.Property<string>("DeliveryMemo")
                        .HasColumnName("delivery_memo")
                        .HasMaxLength(500);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("ReceiptMemo")
                        .HasColumnName("receipt_memo")
                        .HasMaxLength(500);

                    b.Property<bool>("Received")
                        .HasColumnName("received");

                    b.Property<int?>("ReceivedByUserId")
                        .HasColumnName("received_by_user_id");

                    b.Property<DateTimeOffset?>("ReceivedOn")
                        .HasColumnName("received_on");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<bool>("Rejected")
                        .HasColumnName("rejected");

                    b.Property<int?>("RejectedByUserId")
                        .HasColumnName("rejected_by_user_id");

                    b.Property<DateTimeOffset?>("RejectedOn")
                        .HasColumnName("rejected_on");

                    b.Property<string>("RejectionReason")
                        .HasColumnName("rejection_reason")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("request_date")
                        .HasColumnType("date");

                    b.Property<string>("StatementReference")
                        .HasColumnName("statement_reference")
                        .HasMaxLength(2000);

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("InventoryTransferRequestId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("AuthorizedByUserId");

                    b.HasIndex("DeliveredByUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ReceivedByUserId");

                    b.HasIndex("RejectedByUserId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("inventory_transfer_requests","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferRequestDetail", b =>
                {
                    b.Property<long>("InventoryTransferRequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inventory_transfer_request_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BaseQuantity")
                        .HasColumnName("base_quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("BaseUnitId")
                        .HasColumnName("base_unit_id");

                    b.Property<long>("InventoryTransferRequestId")
                        .HasColumnName("inventory_transfer_request_id");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("request_date")
                        .HasColumnType("date");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("InventoryTransferRequestDetailId");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("InventoryTransferRequestId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("inventory_transfer_request_details","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowPurchase")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_purchase")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("AllowSales")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_sales")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Barcode")
                        .HasColumnName("barcode")
                        .HasMaxLength(100);

                    b.Property<int?>("BrandId")
                        .HasColumnName("brand_id");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnName("cost_price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("CostPriceIncludesTax")
                        .HasColumnName("cost_price_includes_tax");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("HotItem")
                        .HasColumnName("hot_item");

                    b.Property<bool?>("IsTaxableItem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_taxable_item")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IsVariantOf")
                        .HasColumnName("is_variant_of");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnName("item_code")
                        .HasMaxLength(24);

                    b.Property<int>("ItemGroupId")
                        .HasColumnName("item_group_id");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnName("item_name")
                        .HasMaxLength(500);

                    b.Property<int>("ItemTypeId")
                        .HasColumnName("item_type_id");

                    b.Property<int?>("LeadTimeInDays")
                        .HasColumnName("lead_time_in_days");

                    b.Property<bool?>("MaintainInventory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maintain_inventory")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo");

                    b.Property<int?>("PreferredSupplierId")
                        .HasColumnName("preferred_supplier_id");

                    b.Property<int>("ReorderLevel")
                        .HasColumnName("reorder_level");

                    b.Property<decimal>("ReorderQuantity")
                        .HasColumnName("reorder_quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("ReorderUnitId")
                        .HasColumnName("reorder_unit_id");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnName("selling_price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("SellingPriceIncludesTax")
                        .HasColumnName("selling_price_includes_tax");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("ItemId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("BrandId");

                    b.HasIndex("IsVariantOf");

                    b.HasIndex("ItemCode")
                        .IsUnique()
                        .HasName("items_item_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("PreferredSupplierId");

                    b.HasIndex("ReorderUnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("items","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemGroup", b =>
                {
                    b.Property<int>("ItemGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_group_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CostOfGoodsSoldAccountId")
                        .HasColumnName("cost_of_goods_sold_account_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("ExcludeFromPurchase")
                        .HasColumnName("exclude_from_purchase");

                    b.Property<bool>("ExcludeFromSales")
                        .HasColumnName("exclude_from_sales");

                    b.Property<int>("InventoryAccountId")
                        .HasColumnName("inventory_account_id");

                    b.Property<string>("ItemGroupCode")
                        .IsRequired()
                        .HasColumnName("item_group_code")
                        .HasMaxLength(24);

                    b.Property<string>("ItemGroupName")
                        .IsRequired()
                        .HasColumnName("item_group_name")
                        .HasMaxLength(500);

                    b.Property<int?>("ParentItemGroupId")
                        .HasColumnName("parent_item_group_id");

                    b.Property<int>("PurchaseAccountId")
                        .HasColumnName("purchase_account_id");

                    b.Property<int>("PurchaseDiscountAccountId")
                        .HasColumnName("purchase_discount_account_id");

                    b.Property<int>("SalesAccountId")
                        .HasColumnName("sales_account_id");

                    b.Property<int>("SalesDiscountAccountId")
                        .HasColumnName("sales_discount_account_id");

                    b.Property<int>("SalesReturnAccountId")
                        .HasColumnName("sales_return_account_id");

                    b.HasKey("ItemGroupId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CostOfGoodsSoldAccountId");

                    b.HasIndex("InventoryAccountId");

                    b.HasIndex("ItemGroupCode")
                        .IsUnique()
                        .HasName("item_groups_item_group_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ItemGroupName")
                        .IsUnique()
                        .HasName("item_groups_item_group_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ParentItemGroupId");

                    b.HasIndex("PurchaseAccountId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("SalesAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("SalesReturnAccountId");

                    b.ToTable("item_groups","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsComponent")
                        .HasColumnName("is_component");

                    b.Property<string>("ItemTypeCode")
                        .IsRequired()
                        .HasColumnName("item_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasColumnName("item_type_name")
                        .HasMaxLength(50);

                    b.HasKey("ItemTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ItemTypeCode")
                        .IsUnique()
                        .HasName("item_type_item_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ItemTypeName")
                        .IsUnique()
                        .HasName("item_type_item_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("item_types","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemVariant", b =>
                {
                    b.Property<int>("ItemVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_variant_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int>("VariantId")
                        .HasColumnName("variant_id");

                    b.HasKey("ItemVariantId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VariantId");

                    b.ToTable("item_variants","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.SerialNumber", b =>
                {
                    b.Property<long>("SerialNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("serial_number_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnName("batch_number")
                        .HasMaxLength(50);

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("expiry_date")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<long?>("SalesTransactionId")
                        .HasColumnName("sales_transaction_id");

                    b.Property<string>("SerialNumber1")
                        .IsRequired()
                        .HasColumnName("serial_number")
                        .HasMaxLength(150);

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnName("transaction_type")
                        .HasMaxLength(2);

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("SerialNumberId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SalesTransactionId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UnitId");

                    b.ToTable("serial_numbers","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Shipper", b =>
                {
                    b.Property<int>("ShipperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("shipper_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Cell")
                        .HasColumnName("cell")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("company_name")
                        .HasMaxLength(128);

                    b.Property<string>("ContactAddressLine1")
                        .HasColumnName("contact_address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnName("contact_address_line_2")
                        .HasMaxLength(128);

                    b.Property<string>("ContactCell")
                        .HasColumnName("contact_cell")
                        .HasMaxLength(50);

                    b.Property<string>("ContactCity")
                        .HasColumnName("contact_city")
                        .HasMaxLength(50);

                    b.Property<string>("ContactCountry")
                        .HasColumnName("contact_country")
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmail")
                        .HasColumnName("contact_email")
                        .HasMaxLength(128);

                    b.Property<string>("ContactPerson")
                        .HasColumnName("contact_person")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPhone")
                        .HasColumnName("contact_phone")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPoBox")
                        .HasColumnName("contact_po_box")
                        .HasMaxLength(128);

                    b.Property<string>("ContactState")
                        .HasColumnName("contact_state")
                        .HasMaxLength(50);

                    b.Property<string>("ContactStreet")
                        .HasColumnName("contact_street")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<string>("CstNumber")
                        .HasColumnName("cst_number")
                        .HasMaxLength(50);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(128);

                    b.Property<string>("FactoryAddress")
                        .HasColumnName("factory_address")
                        .HasMaxLength(250);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(50);

                    b.Property<string>("PanNumber")
                        .HasColumnName("pan_number")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("PoBox")
                        .HasColumnName("po_box")
                        .HasMaxLength(128);

                    b.Property<string>("ShipperCode")
                        .HasColumnName("shipper_code")
                        .HasMaxLength(24);

                    b.Property<string>("ShipperName")
                        .HasColumnName("shipper_name")
                        .HasMaxLength(150);

                    b.Property<string>("SstNumber")
                        .HasColumnName("sst_number")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(50);

                    b.HasKey("ShipperId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ShipperCode")
                        .IsUnique()
                        .HasName("shippers_shipper_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("ShipperName")
                        .IsUnique()
                        .HasName("shippers_shipper_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("shippers","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(128);

                    b.Property<bool?>("AllowSales")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("allow_sales")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Cell")
                        .HasColumnName("cell")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<int>("DefaultAccountIdForChecks")
                        .HasColumnName("default_account_id_for_checks");

                    b.Property<int>("DefaultCashAccountId")
                        .HasColumnName("default_cash_account_id");

                    b.Property<int>("DefaultCashRepositoryId")
                        .HasColumnName("default_cash_repository_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(50);

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<int>("PurchaseDiscountAccountId");

                    b.Property<int>("SalesDiscountAccountId");

                    b.Property<int>("ShippingExpenseAccountId");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(50);

                    b.Property<string>("StoreCode")
                        .IsRequired()
                        .HasColumnName("store_code")
                        .HasMaxLength(24);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnName("store_name")
                        .HasMaxLength(500);

                    b.Property<int>("StoreTypeId")
                        .HasColumnName("store_type_id");

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(50);

                    b.HasKey("StoreId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DefaultAccountIdForChecks");

                    b.HasIndex("DefaultCashAccountId");

                    b.HasIndex("DefaultCashRepositoryId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PurchaseDiscountAccountId");

                    b.HasIndex("SalesDiscountAccountId");

                    b.HasIndex("ShippingExpenseAccountId");

                    b.HasIndex("StoreCode")
                        .IsUnique()
                        .HasName("stores_store_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("StoreName")
                        .IsUnique()
                        .HasName("stores_store_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("stores","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.StoreType", b =>
                {
                    b.Property<int>("StoreTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("StoreTypeCode")
                        .IsRequired()
                        .HasColumnName("store_type_code")
                        .HasMaxLength(12);

                    b.Property<string>("StoreTypeName")
                        .IsRequired()
                        .HasColumnName("store_type_name")
                        .HasMaxLength(50);

                    b.HasKey("StoreTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("StoreTypeCode")
                        .IsUnique()
                        .HasName("store_types_store_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("StoreTypeName")
                        .IsUnique()
                        .HasName("store_types_store_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("store_types","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("supplier_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CompanyAddressLine1")
                        .HasColumnName("company_address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("CompanyAddressLine2")
                        .HasColumnName("company_address_line_2")
                        .HasMaxLength(128);

                    b.Property<string>("CompanyCity")
                        .HasColumnName("company_city")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyCountry")
                        .HasColumnName("company_country")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyFax")
                        .HasColumnName("company_fax")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPhoneNumbers")
                        .HasColumnName("company_phone_numbers")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPoBox")
                        .HasColumnName("company_po_box")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyState")
                        .HasColumnName("company_state")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyStreet")
                        .HasColumnName("company_street")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyZipCode")
                        .HasColumnName("company_zip_code")
                        .HasMaxLength(1000);

                    b.Property<string>("ContactAddressLine1")
                        .HasColumnName("contact_address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnName("contact_address_line_2")
                        .HasMaxLength(128);

                    b.Property<string>("ContactCity")
                        .HasColumnName("contact_city")
                        .HasMaxLength(100);

                    b.Property<string>("ContactCountry")
                        .HasColumnName("contact_country")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFax")
                        .HasColumnName("contact_fax")
                        .HasMaxLength(100);

                    b.Property<string>("ContactFirstName")
                        .HasColumnName("contact_first_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactLastName")
                        .HasColumnName("contact_last_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactMiddleName")
                        .HasColumnName("contact_middle_name")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhoneNumbers")
                        .HasColumnName("contact_phone_numbers")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPoBox")
                        .HasColumnName("contact_po_box")
                        .HasMaxLength(100);

                    b.Property<string>("ContactState")
                        .HasColumnName("contact_state")
                        .HasMaxLength(100);

                    b.Property<string>("ContactStreet")
                        .HasColumnName("contact_street")
                        .HasMaxLength(100);

                    b.Property<string>("ContactZipCode")
                        .HasColumnName("contact_zip_code")
                        .HasMaxLength(100);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(128);

                    b.Property<byte[]>("Logo")
                        .HasColumnName("logo");

                    b.Property<string>("PanNumber")
                        .HasColumnName("pan_number")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasColumnName("supplier_code")
                        .HasMaxLength(24);

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnName("supplier_name")
                        .HasMaxLength(500);

                    b.Property<int>("SupplierTypeId")
                        .HasColumnName("supplier_type_id");

                    b.HasKey("SupplierId");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasName("suppliers_account_id_uix")
                        .HasFilter("([deleted]=(0) AND [account_id] IS NOT NULL)");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("SupplierCode")
                        .IsUnique()
                        .HasName("suppliers_supplier_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("suppliers","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.SupplierType", b =>
                {
                    b.Property<int>("SupplierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("supplier_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SupplierTypeCode")
                        .IsRequired()
                        .HasColumnName("supplier_type_code")
                        .HasMaxLength(24);

                    b.Property<string>("SupplierTypeName")
                        .IsRequired()
                        .HasColumnName("supplier_type_name")
                        .HasMaxLength(500);

                    b.HasKey("SupplierTypeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("SupplierTypeCode")
                        .IsUnique()
                        .HasName("supplier_types_supplier_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("SupplierTypeName")
                        .IsUnique()
                        .HasName("supplier_types_supplier_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("supplier_types","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("unit_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UnitCode")
                        .IsRequired()
                        .HasColumnName("unit_code")
                        .HasMaxLength(24);

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnName("unit_name")
                        .HasMaxLength(500);

                    b.HasKey("UnitId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UnitCode")
                        .IsUnique()
                        .HasName("units_unit_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("UnitName")
                        .IsUnique()
                        .HasName("units_unit_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("units","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Variant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("variant_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnName("attribute_id");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnName("attribute_value")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("VariantCode")
                        .IsRequired()
                        .HasColumnName("variant_code")
                        .HasMaxLength(12);

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnName("variant_name")
                        .HasMaxLength(100);

                    b.HasKey("VariantId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("VariantCode")
                        .IsUnique()
                        .HasName("variants_variant_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("VariantName")
                        .IsUnique()
                        .HasName("variants_variant_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("variants","inventory");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.ItemCostPrice", b =>
                {
                    b.Property<long>("ItemCostPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_cost_price_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IncludesTax")
                        .HasColumnName("includes_tax");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int>("LeadTimeInDays")
                        .HasColumnName("lead_time_in_days");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("ItemCostPriceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("ItemId", "UnitId", "SupplierId")
                        .IsUnique()
                        .HasName("item_cost_prices_item_id_unit_id_supplier_id")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("item_cost_prices","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnName("expected_delivery_date")
                        .HasColumnType("date");

                    b.Property<string>("InternalMemo")
                        .HasColumnName("internal_memo")
                        .HasMaxLength(500);

                    b.Property<decimal>("NontaxableTotal")
                        .HasColumnName("nontaxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<long?>("QuotationId")
                        .HasColumnName("quotation_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<int?>("ShipperId")
                        .HasColumnName("shipper_id");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxableTotal")
                        .HasColumnName("taxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("Terms")
                        .HasColumnName("terms")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("OrderId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("orders","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("IsTaxed")
                        .HasColumnName("is_taxed");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<long>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnName("shipping_charge")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("order_details","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.PriceType", b =>
                {
                    b.Property<int>("PriceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("price_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PriceTypeCode")
                        .IsRequired()
                        .HasColumnName("price_type_code")
                        .HasMaxLength(24);

                    b.Property<string>("PriceTypeName")
                        .IsRequired()
                        .HasColumnName("price_type_name")
                        .HasMaxLength(500);

                    b.HasKey("PriceTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("PriceTypeCode")
                        .IsUnique()
                        .HasName("price_types_price_type_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("PriceTypeName")
                        .IsUnique()
                        .HasName("price_types_price_type_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("price_types","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Purchase", b =>
                {
                    b.Property<long>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("purchase_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("purchases","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.PurchaseReturn", b =>
                {
                    b.Property<long>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("purchase_return_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<long>("PurchaseId")
                        .HasColumnName("purchase_id");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase_returns","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Quotation", b =>
                {
                    b.Property<long>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quotation_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnName("expected_delivery_date")
                        .HasColumnType("date");

                    b.Property<string>("InternalMemo")
                        .HasColumnName("internal_memo")
                        .HasMaxLength(500);

                    b.Property<decimal>("NontaxableTotal")
                        .HasColumnName("nontaxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<int?>("ShipperId")
                        .HasColumnName("shipper_id");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxableTotal")
                        .HasColumnName("taxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("Terms")
                        .HasColumnName("terms")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("QuotationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("quotations","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.QuotationDetail", b =>
                {
                    b.Property<long>("QuotationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quotation_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("IsTaxed")
                        .HasColumnName("is_taxed");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("QuotationId")
                        .HasColumnName("quotation_id");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnName("shipping_charge")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("QuotationDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("UnitId");

                    b.ToTable("quotation_details","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.SupplierPayment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("BankId")
                        .HasColumnName("bank_id");

                    b.Property<string>("BankInstrumentCode")
                        .HasColumnName("bank_instrument_code")
                        .HasMaxLength(500);

                    b.Property<string>("BankTransactionCode")
                        .HasColumnName("bank_transaction_code")
                        .HasMaxLength(500);

                    b.Property<int?>("CashRepositoryId")
                        .HasColumnName("cash_repository_id");

                    b.Property<decimal?>("Change")
                        .HasColumnName("change")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("CheckAmount")
                        .HasColumnName("check_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("CheckBankName")
                        .HasColumnName("check_bank_name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("check_date")
                        .HasColumnType("date");

                    b.Property<string>("CheckNumber")
                        .HasColumnName("check_number")
                        .HasMaxLength(100);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<decimal>("ErCredit")
                        .HasColumnName("er_credit")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("ErDebit")
                        .HasColumnName("er_debit")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnName("posted_date")
                        .HasColumnType("date");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<decimal?>("Tender")
                        .HasColumnName("tender")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankId");

                    b.HasIndex("CashRepositoryId")
                        .HasName("supplier_payments_cash_repository_id_inx");

                    b.HasIndex("CurrencyCode")
                        .HasName("supplier_payments_currency_code_inx");

                    b.HasIndex("PostedDate")
                        .HasName("supplier_payments_posted_date_inx");

                    b.HasIndex("SupplierId")
                        .HasName("supplier_payments_supplier_id_inx");

                    b.HasIndex("TransactionMasterId")
                        .HasName("supplier_payments_transaction_master_id_inx");

                    b.ToTable("supplier_payments","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.SupplierwiseCostPrice", b =>
                {
                    b.Property<long>("CostPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cost_price_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("CostPriceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.ToTable("supplierwise_cost_prices","purchase");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Cashier", b =>
                {
                    b.Property<int>("CashierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cashier_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociatedUserId")
                        .HasColumnName("associated_user_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasColumnName("cashier_code")
                        .HasMaxLength(12);

                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnName("pin_code")
                        .HasMaxLength(8);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnName("valid_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("ValidTill")
                        .HasColumnName("valid_till")
                        .HasColumnType("date");

                    b.HasKey("CashierId");

                    b.HasIndex("AssociatedUserId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashierCode")
                        .IsUnique()
                        .HasName("cashiers_cashier_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("CounterId");

                    b.ToTable("cashiers","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CashierLoginInfo", b =>
                {
                    b.Property<Guid>("CashierLoginInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cashier_login_info_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("AttemptedBy")
                        .HasColumnName("attempted_by");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasMaxLength(1000);

                    b.Property<int?>("CashierId")
                        .HasColumnName("cashier_id");

                    b.Property<int?>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(1000);

                    b.Property<DateTimeOffset>("LoginDate")
                        .HasColumnName("login_date");

                    b.Property<bool>("Success")
                        .HasColumnName("success");

                    b.Property<string>("UserAgent")
                        .HasColumnName("user_agent")
                        .HasMaxLength(1000);

                    b.HasKey("CashierLoginInfoId");

                    b.HasIndex("AttemptedBy");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashierId");

                    b.HasIndex("CounterId");

                    b.ToTable("cashier_login_info","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.ClosingCash", b =>
                {
                    b.Property<long>("ClosingCashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("closing_cash_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApprovalMemo")
                        .HasColumnName("approval_memo")
                        .HasMaxLength(4000);

                    b.Property<int?>("ApprovedBy")
                        .HasColumnName("approved_by");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<decimal?>("Coins")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("coins")
                        .HasColumnType("numeric(30, 6)")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_1")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno10")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_10")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno100")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_100")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno1000")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_1000")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_2")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno20")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_20")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno200")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_200")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno25")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_25")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno250")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_250")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno5")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_5")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno50")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_50")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Deno500")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deno_500")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("memo")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(4000);

                    b.Property<decimal>("OpeningCash")
                        .HasColumnName("opening_cash")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("SubmittedCash")
                        .HasColumnName("submitted_cash")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("SubmittedTo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("submitted_to")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<decimal>("TotalCashSales")
                        .HasColumnName("total_cash_sales")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("transaction_date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("ClosingCashId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UserId", "TransactionDate")
                        .IsUnique()
                        .HasName("closing_cash_transaction_date_user_id_uix");

                    b.ToTable("closing_cash","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("coupon_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssociatedPriceTypeId")
                        .HasColumnName("associated_price_type_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime?>("BeginsFrom")
                        .HasColumnName("begins_from")
                        .HasColumnType("date");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnName("coupon_code")
                        .HasMaxLength(100);

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasColumnName("coupon_name")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool?>("EnableTicketPrinting")
                        .HasColumnName("enable_ticket_printing");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnName("expires_on")
                        .HasColumnType("date");

                    b.Property<decimal?>("ForTicketHavingMaximumAmount")
                        .HasColumnName("for_ticket_having_maximum_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("ForTicketHavingMinimumAmount")
                        .HasColumnName("for_ticket_having_minimum_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("ForTicketOfPriceTypeId")
                        .HasColumnName("for_ticket_of_price_type_id");

                    b.Property<bool?>("ForTicketOfUnknownCustomersOnly")
                        .HasColumnName("for_ticket_of_unknown_customers_only");

                    b.Property<bool>("IsPercentage")
                        .HasColumnName("is_percentage");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasColumnName("maximum_discount_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("MaximumPurchaseAmount")
                        .HasColumnName("maximum_purchase_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("MaximumUsage")
                        .HasColumnName("maximum_usage");

                    b.Property<decimal?>("MinimumPurchaseAmount")
                        .HasColumnName("minimum_purchase_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.HasKey("CouponId");

                    b.HasIndex("AssociatedPriceTypeId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CouponCode")
                        .IsUnique()
                        .HasName("coupons_coupon_code_uix");

                    b.HasIndex("ForTicketOfPriceTypeId");

                    b.ToTable("coupons","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CustomerReceipt", b =>
                {
                    b.Property<long>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("receipt_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("CashRepositoryId")
                        .HasColumnName("cash_repository_id");

                    b.Property<decimal?>("Change")
                        .HasColumnName("change")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("CheckAmount")
                        .HasColumnName("check_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("CheckBankName")
                        .HasColumnName("check_bank_name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CheckClearDate")
                        .HasColumnName("check_clear_date")
                        .HasColumnType("date");

                    b.Property<bool?>("CheckCleared")
                        .HasColumnName("check_cleared");

                    b.Property<string>("CheckClearingMemo")
                        .HasColumnName("check_clearing_memo")
                        .HasMaxLength(1000);

                    b.Property<long?>("CheckClearingTransactionMasterId")
                        .HasColumnName("check_clearing_transaction_master_id");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("check_date")
                        .HasColumnType("date");

                    b.Property<string>("CheckNumber")
                        .HasColumnName("check_number")
                        .HasMaxLength(100);

                    b.Property<string>("CollectedBankInstrumentCode")
                        .HasColumnName("collected_bank_instrument_code")
                        .HasMaxLength(500);

                    b.Property<string>("CollectedBankTransactionCode")
                        .HasColumnName("collected_bank_transaction_code")
                        .HasMaxLength(500);

                    b.Property<int?>("CollectedOnBankId")
                        .HasColumnName("collected_on_bank_id");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnName("currency_code")
                        .HasMaxLength(12);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("ErCredit")
                        .HasColumnName("er_credit")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("ErDebit")
                        .HasColumnName("er_debit")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("GiftCardNumber")
                        .HasColumnName("gift_card_number")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnName("posted_date")
                        .HasColumnType("date");

                    b.Property<decimal?>("Tender")
                        .HasColumnName("tender")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.HasKey("ReceiptId");

                    b.HasIndex("CashRepositoryId")
                        .HasName("customer_receipts_cash_repository_id_inx");

                    b.HasIndex("CheckClearingTransactionMasterId");

                    b.HasIndex("CollectedOnBankId");

                    b.HasIndex("CurrencyCode")
                        .HasName("customer_receipts_currency_code_inx");

                    b.HasIndex("CustomerId")
                        .HasName("customer_receipts_customer_id_inx");

                    b.HasIndex("PostedDate")
                        .HasName("customer_receipts_posted_date_inx");

                    b.HasIndex("TransactionMasterId")
                        .HasName("customer_receipts_transaction_master_id_inx");

                    b.ToTable("customer_receipts","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CustomerwiseSellingPrice", b =>
                {
                    b.Property<long>("SellingPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("selling_price_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal?>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("SellingPriceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("customerwise_selling_prices","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.GiftCard", b =>
                {
                    b.Property<int>("GiftCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gift_card_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnName("address_line_1")
                        .HasMaxLength(128);

                    b.Property<string>("AddressLine2")
                        .HasColumnName("address_line_2")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(100);

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(100);

                    b.Property<string>("GiftCardNumber")
                        .IsRequired()
                        .HasColumnName("gift_card_number")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasMaxLength(100);

                    b.Property<int>("PayableAccountId")
                        .HasColumnName("payable_account_id");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnName("phone_numbers")
                        .HasMaxLength(100);

                    b.Property<string>("PoBox")
                        .HasColumnName("po_box")
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(100);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasMaxLength(100);

                    b.HasKey("GiftCardId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCardNumber")
                        .IsUnique()
                        .HasName("gift_cards_gift_card_number_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("PayableAccountId");

                    b.ToTable("gift_cards","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.GiftCardTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime?>("BookDate")
                        .HasColumnName("book_date")
                        .HasColumnType("date");

                    b.Property<int>("GiftCardId")
                        .HasColumnName("gift_card_id");

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnName("transaction_type")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("TransactionId");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("TransactionMasterId");

                    b.ToTable("gift_card_transactions","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.ItemSellingPrice", b =>
                {
                    b.Property<long>("ItemSellingPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_selling_price_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnName("customer_type_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IncludesTax")
                        .HasColumnName("includes_tax");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int?>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.HasKey("ItemSellingPriceId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("item_selling_prices","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.LateFee", b =>
                {
                    b.Property<int>("LateFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("late_fee_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsFlatAmount")
                        .HasColumnName("is_flat_amount");

                    b.Property<string>("LateFeeCode")
                        .IsRequired()
                        .HasColumnName("late_fee_code")
                        .HasMaxLength(24);

                    b.Property<string>("LateFeeName")
                        .IsRequired()
                        .HasColumnName("late_fee_name")
                        .HasMaxLength(500);

                    b.Property<decimal>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("numeric(30, 6)");

                    b.HasKey("LateFeeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("late_fee","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.LateFeePosting", b =>
                {
                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<long>("LateFeeTranId")
                        .HasColumnName("late_fee_tran_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("TransactionMasterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LateFeeTranId");

                    b.ToTable("late_fee_postings","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.OpeningCash", b =>
                {
                    b.Property<long>("OpeningCashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("opening_cash_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Closed")
                        .HasColumnName("closed");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Memo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("memo")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(4000);

                    b.Property<string>("ProvidedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("provided_by")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnName("transaction_date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("OpeningCashId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("UserId", "TransactionDate")
                        .IsUnique()
                        .HasName("opening_cash_transaction_date_user_id_uix");

                    b.ToTable("opening_cash","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Order1", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnName("expected_delivery_date")
                        .HasColumnType("date");

                    b.Property<string>("InternalMemo")
                        .HasColumnName("internal_memo")
                        .HasMaxLength(500);

                    b.Property<decimal>("NontaxableTotal")
                        .HasColumnName("nontaxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<long?>("QuotationId")
                        .HasColumnName("quotation_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<int?>("ShipperId")
                        .HasColumnName("shipper_id");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxableTotal")
                        .HasColumnName("taxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("Terms")
                        .HasColumnName("terms")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("OrderId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("UserId");

                    b.ToTable("orders","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.OrderDetail1", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("IsTaxed")
                        .HasColumnName("is_taxed");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<long>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnName("shipping_charge")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("order_details","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.PaymentTerm", b =>
                {
                    b.Property<int>("PaymentTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_term_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("DueDays")
                        .HasColumnName("due_days");

                    b.Property<int?>("DueFrequencyId")
                        .HasColumnName("due_frequency_id");

                    b.Property<bool>("DueOnDate")
                        .HasColumnName("due_on_date");

                    b.Property<int>("GracePeriod")
                        .HasColumnName("grace_period");

                    b.Property<int?>("LateFeeId")
                        .HasColumnName("late_fee_id");

                    b.Property<int?>("LateFeePostingFrequencyId")
                        .HasColumnName("late_fee_posting_frequency_id");

                    b.Property<string>("PaymentTermCode")
                        .IsRequired()
                        .HasColumnName("payment_term_code")
                        .HasMaxLength(24);

                    b.Property<string>("PaymentTermName")
                        .IsRequired()
                        .HasColumnName("payment_term_name")
                        .HasMaxLength(500);

                    b.HasKey("PaymentTermId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DueFrequencyId");

                    b.HasIndex("LateFeeId");

                    b.HasIndex("LateFeePostingFrequencyId");

                    b.HasIndex("PaymentTermCode")
                        .IsUnique()
                        .HasName("payment_terms_payment_term_code_uix")
                        .HasFilter("([deleted]=(0))");

                    b.HasIndex("PaymentTermName")
                        .IsUnique()
                        .HasName("payment_terms_payment_term_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("payment_terms","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.PriceType1", b =>
                {
                    b.Property<int>("PriceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("price_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PriceTypeCode")
                        .IsRequired()
                        .HasColumnName("price_type_code")
                        .HasMaxLength(24);

                    b.Property<string>("PriceTypeName")
                        .IsRequired()
                        .HasColumnName("price_type_name")
                        .HasMaxLength(500);

                    b.HasKey("PriceTypeId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("price_types","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Quotation1", b =>
                {
                    b.Property<long>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quotation_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool>("Cancelled")
                        .HasColumnName("cancelled");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnName("expected_delivery_date")
                        .HasColumnType("date");

                    b.Property<string>("InternalMemo")
                        .HasColumnName("internal_memo")
                        .HasMaxLength(500);

                    b.Property<decimal>("NontaxableTotal")
                        .HasColumnName("nontaxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("OfficeId")
                        .HasColumnName("office_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnName("reference_number")
                        .HasMaxLength(24);

                    b.Property<int?>("ShipperId")
                        .HasColumnName("shipper_id");

                    b.Property<decimal>("Tax")
                        .HasColumnName("tax")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnName("tax_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TaxableTotal")
                        .HasColumnName("taxable_total")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("Terms")
                        .HasColumnName("terms")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset>("TransactionTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("transaction_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("QuotationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("UserId");

                    b.ToTable("quotations","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.QuotationDetail1", b =>
                {
                    b.Property<long>("QuotationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("quotation_detail_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("discount_rate")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<bool>("IsTaxed")
                        .HasColumnName("is_taxed");

                    b.Property<int>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("QuotationId")
                        .HasColumnName("quotation_id");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnName("shipping_charge")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<int>("UnitId")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("ValueDate")
                        .HasColumnName("value_date")
                        .HasColumnType("date");

                    b.HasKey("QuotationDetailId");

                    b.HasIndex("ItemId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("UnitId");

                    b.ToTable("quotation_details","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("return_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("IsCredit")
                        .HasColumnName("is_credit");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<long>("ReturnTransactionMasterId")
                        .HasColumnName("return_transaction_master_id");

                    b.Property<long>("SalesId")
                        .HasColumnName("sales_id");

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.HasKey("ReturnId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("CounterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ReturnTransactionMasterId");

                    b.HasIndex("SalesId");

                    b.HasIndex("TransactionMasterId");

                    b.ToTable("returns","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Sale", b =>
                {
                    b.Property<long>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sales_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CashRepositoryId")
                        .HasColumnName("cash_repository_id");

                    b.Property<decimal>("Change")
                        .HasColumnName("change")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("CheckAmount")
                        .HasColumnName("check_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("CheckBankName")
                        .HasColumnName("check_bank_name")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnName("check_date")
                        .HasColumnType("date");

                    b.Property<string>("CheckNumber")
                        .HasColumnName("check_number")
                        .HasMaxLength(100);

                    b.Property<long>("CheckoutId")
                        .HasColumnName("checkout_id");

                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<int?>("CouponId")
                        .HasColumnName("coupon_id");

                    b.Property<bool?>("CreditSettled")
                        .HasColumnName("credit_settled");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<decimal?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<string>("FiscalYearCode")
                        .IsRequired()
                        .HasColumnName("fiscal_year_code")
                        .HasMaxLength(12);

                    b.Property<int?>("GiftCardId")
                        .HasColumnName("gift_card_id");

                    b.Property<long>("InvoiceNumber")
                        .HasColumnName("invoice_number");

                    b.Property<bool>("IsCredit")
                        .HasColumnName("is_credit");

                    b.Property<bool?>("IsFlatDiscount")
                        .HasColumnName("is_flat_discount");

                    b.Property<int?>("PaymentTermId")
                        .HasColumnName("payment_term_id");

                    b.Property<int>("PriceTypeId")
                        .HasColumnName("price_type_id");

                    b.Property<long?>("ReceiptTransactionMasterId")
                        .HasColumnName("receipt_transaction_master_id");

                    b.Property<decimal>("RewardPoints")
                        .HasColumnName("reward_points")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long?>("SalesOrderId")
                        .HasColumnName("sales_order_id");

                    b.Property<long?>("SalesQuotationId")
                        .HasColumnName("sales_quotation_id");

                    b.Property<int?>("SalespersonId")
                        .HasColumnName("salesperson_id");

                    b.Property<decimal>("Tender")
                        .HasColumnName("tender")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnName("total_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<decimal?>("TotalDiscountAmount")
                        .HasColumnName("total_discount_amount")
                        .HasColumnType("numeric(30, 6)");

                    b.Property<long>("TransactionMasterId")
                        .HasColumnName("transaction_master_id");

                    b.HasKey("SalesId");

                    b.HasIndex("CashRepositoryId");

                    b.HasIndex("CheckoutId");

                    b.HasIndex("CounterId");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("ReceiptTransactionMasterId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("SalesQuotationId");

                    b.HasIndex("SalespersonId");

                    b.HasIndex("TransactionMasterId");

                    b.HasIndex("FiscalYearCode", "InvoiceNumber")
                        .IsUnique()
                        .HasName("sales_invoice_number_fiscal_year_uix");

                    b.ToTable("sales","sales");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Social.Feed", b =>
                {
                    b.Property<long>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("feed_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachments")
                        .HasColumnName("attachments");

                    b.Property<DateTimeOffset>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int?>("DeletedBy")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnName("deleted_on");

                    b.Property<DateTimeOffset>("EventTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("event_timestamp")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("FormattedText")
                        .IsRequired()
                        .HasColumnName("formatted_text")
                        .HasMaxLength(4000);

                    b.Property<bool?>("IsPublic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_public")
                        .HasDefaultValueSql("((1))");

                    b.Property<long?>("ParentFeedId")
                        .HasColumnName("parent_feed_id");

                    b.Property<string>("Scope")
                        .HasColumnName("scope")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(4000);

                    b.HasKey("FeedId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ParentFeedId");

                    b.HasIndex("Scope")
                        .HasName("feeds_scope_inx");

                    b.ToTable("feeds","social");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("category_name")
                        .HasMaxLength(250);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsBlog")
                        .HasColumnName("is_blog");

                    b.Property<string>("SeoDescription")
                        .HasColumnName("seo_description")
                        .HasMaxLength(100);

                    b.HasKey("CategoryId");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasName("UQ__categori__8C585C0470CD246F");

                    b.HasIndex("AuditUserId");

                    b.ToTable("categories","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("configuration_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("BlogDescription")
                        .HasColumnName("blog_description")
                        .HasMaxLength(500);

                    b.Property<string>("BlogTitle")
                        .HasColumnName("blog_title")
                        .HasMaxLength(500);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnName("domain_name")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsDefault")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_default")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("WebsiteName")
                        .IsRequired()
                        .HasColumnName("website_name")
                        .HasMaxLength(500);

                    b.HasKey("ConfigurationId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("DomainName")
                        .IsUnique()
                        .HasName("configuration_domain_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("configurations","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(500);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(100);

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasMaxLength(500);

                    b.Property<bool?>("DisplayContactForm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("display_contact_form")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("DisplayEmail")
                        .HasColumnName("display_email");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasMaxLength(500);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(500);

                    b.Property<string>("Recipients")
                        .HasColumnName("recipients")
                        .HasMaxLength(1000);

                    b.Property<int>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(500);

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(500);

                    b.HasKey("ContactId");

                    b.HasIndex("AuditUserId");

                    b.ToTable("contacts","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias")
                        .HasMaxLength(500);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int?>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnName("contents");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Hits")
                        .HasColumnName("hits");

                    b.Property<bool?>("IsDraft")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_draft")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsHomepage")
                        .HasColumnName("is_homepage");

                    b.Property<DateTimeOffset?>("LastEditedOn")
                        .HasColumnName("last_edited_on");

                    b.Property<int?>("LastEditorId")
                        .HasColumnName("last_editor_id");

                    b.Property<string>("Markdown")
                        .HasColumnName("markdown");

                    b.Property<DateTimeOffset>("PublishOn")
                        .HasColumnName("publish_on");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("seo_description")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(1000);

                    b.Property<string>("Tags")
                        .HasColumnName("tags")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(500);

                    b.HasKey("ContentId");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasName("UQ__contents__8C585C049FBBBAA4");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastEditorId");

                    b.ToTable("contents","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.EmailSubscription", b =>
                {
                    b.Property<Guid>("EmailSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_subscription_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<string>("Browser")
                        .HasColumnName("browser")
                        .HasMaxLength(500);

                    b.Property<bool?>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("confirmed")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset?>("ConfirmedOn")
                        .HasColumnName("confirmed_on");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(100);

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("SubscribedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("subscribed_on")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool?>("Unsubscribed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("unsubscribed")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTimeOffset?>("UnsubscribedOn")
                        .HasColumnName("unsubscribed_on");

                    b.HasKey("EmailSubscriptionId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__email_su__AB6E6164CF62348B");

                    b.ToTable("email_subscriptions","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Menu1", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(500);

                    b.Property<string>("MenuName")
                        .HasColumnName("menu_name")
                        .HasMaxLength(100);

                    b.HasKey("MenuId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("MenuName")
                        .IsUnique()
                        .HasName("menus_menu_name_uix")
                        .HasFilter("([deleted]=(0))");

                    b.ToTable("menus","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_item_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AuditTs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("audit_ts")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("AuditUserId")
                        .HasColumnName("audit_user_id");

                    b.Property<int?>("ContentId")
                        .HasColumnName("content_id");

                    b.Property<bool?>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MenuId")
                        .HasColumnName("menu_id");

                    b.Property<int?>("ParentMenuItemId")
                        .HasColumnName("parent_menu_item_id");

                    b.Property<int>("Sort")
                        .HasColumnName("sort");

                    b.Property<string>("Target")
                        .HasColumnName("target")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(500);

                    b.HasKey("MenuItemId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ContentId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentMenuItemId");

                    b.ToTable("menu_items","website");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.AccessToken", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.Application", "Application")
                        .WithMany("AccessTokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("FK__access_to__appli__2DE6D218");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("AccessTokenAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__access_to__audit__31B762FC");

                    b.HasOne("ApplicationCore.Entities.Accounts.Login", "Login")
                        .WithMany("AccessTokens")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FK__access_to__login__2EDAF651");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "RevokedByNavigation")
                        .WithMany("AccessTokenRevokedByNavigations")
                        .HasForeignKey("RevokedBy")
                        .HasConstraintName("FK__access_to__revok__30C33EC3");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Application", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Applications")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__applicati__audit__282DF8C2");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.ConfigurationProfile", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ConfigurationProfiles")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__configura__audit__04E4BC85");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "RegistrationOffice")
                        .WithMany("ConfigurationProfiles")
                        .HasForeignKey("RegistrationOfficeId")
                        .HasConstraintName("FK__configura__regis__6FE99F9F");

                    b.HasOne("ApplicationCore.Entities.Accounts.Role", "RegistrationRole")
                        .WithMany("ConfigurationProfiles")
                        .HasForeignKey("RegistrationRoleId")
                        .HasConstraintName("FK__configura__regis__70DDC3D8");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.FbAccessToken", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("FbAccessTokenAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__fb_access__audit__1332DBDC");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithOne("FbAccessTokenUser")
                        .HasForeignKey("ApplicationCore.Entities.Accounts.FbAccessToken", "UserId")
                        .HasConstraintName("FK__fb_access__user___123EB7A3");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.GoogleAccessToken", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("GoogleAccessTokenAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__google_ac__audit__18EBB532");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithOne("GoogleAccessTokenUser")
                        .HasForeignKey("ApplicationCore.Entities.Accounts.GoogleAccessToken", "UserId")
                        .HasConstraintName("FK__google_ac__user___17F790F9");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Login", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("LoginAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__logins__audit_us__2180FB33");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Logins")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__logins__office_i__1EA48E88");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("LoginUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__logins__user_id__1DB06A4F");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.ResetRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ResetRequestAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__reset_req__audit__0D7A0286");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("ResetRequestUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__reset_req__user___09A971A2");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.Role", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Roles")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__roles__audit_use__05D8E0BE");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Accounts.User", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("InverseAuditUser")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__users__audit_use__02084FDA");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__users__office_id__7E37BEF6");

                    b.HasOne("ApplicationCore.Entities.Accounts.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__users__role_id__7F2BE32F");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AddessBook.Contact1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AssociatedUser")
                        .WithMany("Contact1AssociatedUser")
                        .HasForeignKey("AssociatedUserId")
                        .HasConstraintName("FK__contacts__associ__220B0B18");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Contact1AuditUser")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__contacts__audit___24E777C3");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "CreatedByNavigation")
                        .WithMany("Contact1CreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__contacts__create__23F3538A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.AccessType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("AccessTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__access_ty__audit__56E8E7AB");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.EntityAccessPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Auth.AccessType", "AccessType")
                        .WithMany("EntityAccessPolicies")
                        .HasForeignKey("AccessTypeId")
                        .HasConstraintName("FK__entity_ac__acces__65370702");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EntityAccessPolicyAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__entity_ac__audit__662B2B3B");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("EntityAccessPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__entity_ac__offic__634EBE90");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("EntityAccessPolicyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__entity_ac__user___6442E2C9");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.GroupEntityAccessPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Auth.AccessType", "AccessType")
                        .WithMany("GroupEntityAccessPolicies")
                        .HasForeignKey("AccessTypeId")
                        .HasConstraintName("FK__group_ent__acces__5D95E53A");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("GroupEntityAccessPolicies")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__group_ent__audit__5E8A0973");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("GroupEntityAccessPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__group_ent__offic__5BAD9CC8");

                    b.HasOne("ApplicationCore.Entities.Accounts.Role", "Role")
                        .WithMany("GroupEntityAccessPolicies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__group_ent__role___5CA1C101");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.GroupMenuAccessPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("GroupMenuAccessPolicies")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__group_men__audit__6DCC4D03");

                    b.HasOne("ApplicationCore.Entities.Core.Menu", "Menu")
                        .WithMany("GroupMenuAccessPolicies")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK__group_men__menu___6BE40491");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("GroupMenuAccessPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__group_men__offic__6AEFE058");

                    b.HasOne("ApplicationCore.Entities.Accounts.Role", "Role")
                        .WithMany("GroupMenuAccessPolicies")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__group_men__role___6CD828CA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Auth.MenuAccessPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("MenuAccessPolicyAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__menu_acce__audit__756D6ECB");

                    b.HasOne("ApplicationCore.Entities.Core.Menu", "Menu")
                        .WithMany("MenuAccessPolicies")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK__menu_acce__menu___73852659");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("MenuAccessPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__menu_acce__offic__72910220");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("MenuAccessPolicyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__menu_acce__user___74794A92");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Calendar.Category1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Category1AuditUser")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__categorie__audit__2C88998B");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("Category1User")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__categorie__user___2AA05119");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Calendar.Event", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EventAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__events__audit_us__351DDF8C");

                    b.HasOne("ApplicationCore.Entities.Calendar.Category1", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__events__category__324172E1");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__events__user_id__3335971A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomField", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomFields")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__custom_fi__audit__4A4E069C");

                    b.HasOne("ApplicationCore.Entities.Config.CustomFieldSetup", "CustomFieldSetup")
                        .WithMany("CustomFields")
                        .HasForeignKey("CustomFieldSetupId")
                        .HasConstraintName("FK__custom_fi__custo__4959E263");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldDataType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomFieldDataTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__custom_fi__audit__373B3228");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldForm", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomFieldForms")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__custom_fi__audit__3CF40B7E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.CustomFieldSetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomFieldSetups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__custom_fi__audit__44952D46");

                    b.HasOne("ApplicationCore.Entities.Config.CustomFieldDataType", "DataTypeNavigation")
                        .WithMany("CustomFieldSetups")
                        .HasForeignKey("DataType")
                        .HasConstraintName("FK__custom_fi__data___43A1090D");

                    b.HasOne("ApplicationCore.Entities.Config.CustomFieldForm", "FormNameNavigation")
                        .WithMany("CustomFieldSetups")
                        .HasForeignKey("FormName")
                        .HasConstraintName("FK__custom_fi__form___41B8C09B");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.EmailQueue", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmailQueues")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__email_que__audit__2057CCD0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.Filter", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Filters")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__filters__audit_u__32767D0B");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.Kanban", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("KanbanAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__kanbans__audit_u__0697FACD");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("KanbanUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__kanbans__user_id__05A3D694");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.KanbanDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("KanbanDetails")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__kanban_de__audit__0D44F85C");

                    b.HasOne("ApplicationCore.Entities.Config.Kanban", "Kanban")
                        .WithMany("KanbanDetails")
                        .HasForeignKey("KanbanId")
                        .HasConstraintName("FK__kanban_de__kanba__0B5CAFEA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.SmsQueue", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("SmsQueues")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__sms_queue__audit__29E1370A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Config.SmtpConfig", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("SmtpConfigs")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__smtp_conf__audit__16CE6296");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.AppDependency", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Core.App", "AppNameNavigation")
                        .WithMany("AppDependencyAppNameNavigations")
                        .HasForeignKey("AppName")
                        .HasConstraintName("FK__app_depen__app_n__21B6055D");

                    b.HasOne("ApplicationCore.Entities.Core.App", "DependsOnNavigation")
                        .WithMany("AppDependencyDependsOnNavigations")
                        .HasForeignKey("DependsOn")
                        .HasConstraintName("FK__app_depen__depen__22AA2996");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Menu", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Core.App", "AppNameNavigation")
                        .WithMany("Menus")
                        .HasForeignKey("AppName")
                        .HasConstraintName("FK__menus__app_name__276EDEB3");

                    b.HasOne("ApplicationCore.Entities.Core.Menu", "ParentMenu")
                        .WithMany("InverseParentMenu")
                        .HasForeignKey("ParentMenuId")
                        .HasConstraintName("FK__menus__parent_me__286302EC");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Notification", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Core.App", "AssociatedAppNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("AssociatedApp")
                        .HasConstraintName("FK__notificat__assoc__4F7CD00D");

                    b.HasOne("ApplicationCore.Entities.Core.Menu", "AssociatedMenu")
                        .WithMany("Notifications")
                        .HasForeignKey("AssociatedMenuId")
                        .HasConstraintName("FK__notificat__assoc__5070F446");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Notifications")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__notificat__offic__4E88ABD4");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.NotificationStatus", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Core.Notification", "Notification")
                        .WithMany("NotificationStatuses")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK__notificat__notif__5441852A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Core.Office", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Offices")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__offices__audit_u__4F47C5E3");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "ParentOffice")
                        .WithMany("InverseParentOffice")
                        .HasForeignKey("ParentOfficeId")
                        .HasConstraintName("FK__offices__parent___31EC6D26");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.Account", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.AccountMaster", "AccountMaster")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountMasterId")
                        .HasConstraintName("FK__accounts__accoun__61F08603");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Accounts")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__accounts__audit___689D8392");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__accounts__curren__63D8CE75");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "ParentAccount")
                        .WithMany("InverseParentAccount")
                        .HasForeignKey("ParentAccountId")
                        .HasConstraintName("FK__accounts__parent__67A95F59");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.AccountMaster", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("AccountMasters")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__account_m__audit__4FD1D5C8");

                    b.HasOne("ApplicationCore.Entities.Finance.AccountMaster", "ParentAccountMaster")
                        .WithMany("InverseParentAccountMaster")
                        .HasForeignKey("ParentAccountMasterId")
                        .HasConstraintName("FK__account_m__paren__4EDDB18F");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.AutoVerificationPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("AutoVerificationPolicyAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__auto_veri__audit__5A1A5A11");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("AutoVerificationPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__auto_veri__offic__5832119F");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("AutoVerificationPolicyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__auto_veri__user___573DED66");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.BankAccount", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("BankAccounts")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__bank_acco__accou__7ABC33CD");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("BankAccountAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__bank_acco__audit__7F80E8EA");

                    b.HasOne("ApplicationCore.Entities.Finance.BankType", "BankType")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankTypeId")
                        .HasConstraintName("FK__bank_acco__bank___7CA47C3F");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "MaintainedByUser")
                        .WithMany("BankAccountMaintainedByUsers")
                        .HasForeignKey("MaintainedByUserId")
                        .HasConstraintName("FK__bank_acco__maint__7BB05806");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("BankAccounts")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__bank_acco__offic__7E8CC4B1");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.BankType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("BankTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__bank_type__audit__75F77EB0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CardType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CardTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__card_type__audit__2E3BD7D3");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashFlowHeading", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CashFlowHeadings")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cash_flow__audit__7132C993");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashFlowSetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.AccountMaster", "AccountMaster")
                        .WithMany("CashFlowSetups")
                        .HasForeignKey("AccountMasterId")
                        .HasConstraintName("FK__cash_flow__accou__09FE775D");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CashFlowSetups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cash_flow__audit__0AF29B96");

                    b.HasOne("ApplicationCore.Entities.Finance.CashFlowHeading", "CashFlowHeading")
                        .WithMany("CashFlowSetups")
                        .HasForeignKey("CashFlowHeadingId")
                        .HasConstraintName("FK__cash_flow__cash___090A5324");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CashRepository", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CashRepositories")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cash_repo__audit__4183B671");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("CashRepositories")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__cash_repo__offic__3F9B6DFF");

                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "ParentCashRepository")
                        .WithMany("InverseParentCashRepository")
                        .HasForeignKey("ParentCashRepositoryId")
                        .HasConstraintName("FK__cash_repo__paren__408F9238");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.CostCenter", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CostCenters")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cost_cent__audit__54968AE5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.DayOperation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "CompletedByNavigation")
                        .WithMany("DayOperationCompletedByNavigations")
                        .HasForeignKey("CompletedBy")
                        .HasConstraintName("FK__day_opera__compl__6C390A4C");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("DayOperations")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__day_opera__offic__6A50C1DA");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "StartedByNavigation")
                        .WithMany("DayOperationStartedByNavigations")
                        .HasForeignKey("StartedBy")
                        .HasConstraintName("FK__day_opera__start__6B44E613");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.DayOperationRoutine", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.DayOperation", "Day")
                        .WithMany("DayOperationRoutines")
                        .HasForeignKey("DayId")
                        .HasConstraintName("FK__day_opera__day_i__70FDBF69");

                    b.HasOne("ApplicationCore.Entities.Finance.Routine", "Routine")
                        .WithMany("DayOperationRoutines")
                        .HasForeignKey("RoutineId")
                        .HasConstraintName("FK__day_opera__routi__71F1E3A2");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.ExchangeRate", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__exchange___offic__4336F4B9");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.ExchangeRateDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.ExchangeRate", "ExchangeRateNavigation")
                        .WithMany("ExchangeRateDetails")
                        .HasForeignKey("ExchangeRateId")
                        .HasConstraintName("FK__exchange___excha__4707859D");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "ForeignCurrencyCodeNavigation")
                        .WithMany("ExchangeRateDetailForeignCurrencyCodeNavigations")
                        .HasForeignKey("ForeignCurrencyCode")
                        .HasConstraintName("FK__exchange___forei__48EFCE0F");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "LocalCurrencyCodeNavigation")
                        .WithMany("ExchangeRateDetailLocalCurrencyCodeNavigations")
                        .HasForeignKey("LocalCurrencyCode")
                        .HasConstraintName("FK__exchange___local__47FBA9D6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.FiscalYear", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("FiscalYears")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__fiscal_ye__audit__4924D839");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("FiscalYears")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__fiscal_ye__offic__4830B400");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.Frequency", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Frequencies")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__frequenci__audit__3AD6B8E2");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.FrequencySetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("FrequencySetups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__frequency__audit__5D2BD0E6");

                    b.HasOne("ApplicationCore.Entities.Finance.FiscalYear", "FiscalYearCodeNavigation")
                        .WithMany("FrequencySetups")
                        .HasForeignKey("FiscalYearCode")
                        .HasConstraintName("FK__frequency__fisca__5A4F643B");

                    b.HasOne("ApplicationCore.Entities.Finance.Frequency", "Frequency")
                        .WithMany("FrequencySetups")
                        .HasForeignKey("FrequencyId")
                        .HasConstraintName("FK__frequency__frequ__5B438874");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("FrequencySetups")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__frequency__offic__5C37ACAD");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.JournalVerificationPolicy", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("JournalVerificationPolicyAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__journal_v__audit__52793849");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("JournalVerificationPolicies")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__journal_v__offic__4DB4832C");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("JournalVerificationPolicyUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__journal_v__user___4CC05EF3");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.MerchantFeeSetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("MerchantFeeSetups")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__merchant___accou__3B95D2F1");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("MerchantFeeSetups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__merchant___audit__3D7E1B63");

                    b.HasOne("ApplicationCore.Entities.Finance.BankAccount", "MerchantAccount")
                        .WithMany("MerchantFeeSetups")
                        .HasForeignKey("MerchantAccountId")
                        .HasConstraintName("FK__merchant___merch__38B96646");

                    b.HasOne("ApplicationCore.Entities.Finance.PaymentCard", "PaymentCard")
                        .WithMany("MerchantFeeSetups")
                        .HasForeignKey("PaymentCardId")
                        .HasConstraintName("FK__merchant___payme__39AD8A7F");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.PaymentCard", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("PaymentCards")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__payment_c__audit__33F4B129");

                    b.HasOne("ApplicationCore.Entities.Finance.CardType", "CardType")
                        .WithMany("PaymentCards")
                        .HasForeignKey("CardTypeId")
                        .HasConstraintName("FK__payment_c__card___33008CF0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TaxSetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TaxSetups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__tax_setup__audit__61BB7BD9");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "IncomeTaxAccount")
                        .WithMany("TaxSetupIncomeTaxAccounts")
                        .HasForeignKey("IncomeTaxAccountId")
                        .HasConstraintName("FK__tax_setup__incom__5FD33367");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithOne("TaxSetup")
                        .HasForeignKey("ApplicationCore.Entities.Finance.TaxSetup", "OfficeId")
                        .HasConstraintName("FK__tax_setup__offic__5EDF0F2E");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "SalesTaxAccount")
                        .WithMany("TaxSetupSalesTaxAccounts")
                        .HasForeignKey("SalesTaxAccountId")
                        .HasConstraintName("FK__tax_setup__sales__60C757A0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__transacti__accou__25A691D2");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__transacti__audit__2A6B46EF");

                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "CashRepository")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("CashRepositoryId")
                        .HasConstraintName("FK__transacti__cash___269AB60B");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("TransactionDetailCurrencyCodeNavigations")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__transacti__curre__278EDA44");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "LocalCurrencyCodeNavigation")
                        .WithMany("TransactionDetailLocalCurrencyCodeNavigations")
                        .HasForeignKey("LocalCurrencyCode")
                        .HasConstraintName("FK__transacti__local__2882FE7D");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__transacti__offic__297722B6");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__transacti__trans__23BE4960");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionDocument", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TransactionDocuments")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__transacti__audit__1EF99443");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("TransactionDocuments")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__transacti__trans__1E05700A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionMaster", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TransactionMasterAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__transacti__audit__1940BAED");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "CascadingTran")
                        .WithMany("InverseCascadingTran")
                        .HasForeignKey("CascadingTranId")
                        .HasConstraintName("FK__transacti__casca__184C96B4");

                    b.HasOne("ApplicationCore.Entities.Finance.CostCenter", "CostCenter")
                        .WithMany("TransactionMasters")
                        .HasForeignKey("CostCenterId")
                        .HasConstraintName("FK__transacti__cost___1387E197");

                    b.HasOne("ApplicationCore.Entities.Accounts.Login", "Login")
                        .WithMany("TransactionMasters")
                        .HasForeignKey("LoginId")
                        .HasConstraintName("FK__transacti__login__10AB74EC");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("TransactionMasters")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__transacti__offic__1293BD5E");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("TransactionMasterUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__transacti__user___119F9925");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("TransactionMasters")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__transacti__verif__15702A09");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("TransactionMasterVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__transacti__verif__147C05D0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Finance.TransactionType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TransactionTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__transacti__audit__04459E07");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Attendance", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Attendances")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__attendanc__audit__569ECEE8");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__attendanc__emplo__54B68676");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Attendances")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__attendanc__offic__53C2623D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Contract", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ContractAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__contracts__audit__13DCE752");

                    b.HasOne("ApplicationCore.Entities.Hrm.Department", "Department")
                        .WithMany("Contracts")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__contracts__depar__0E240DFC");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__contracts__emplo__0C3BC58A");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmploymentStatusCode", "EmploymentStatusCode")
                        .WithMany("Contracts")
                        .HasForeignKey("EmploymentStatusCodeId")
                        .HasConstraintName("FK__contracts__emplo__11007AA7");

                    b.HasOne("ApplicationCore.Entities.Hrm.LeaveBenefit", "LeaveBenefit")
                        .WithMany("Contracts")
                        .HasForeignKey("LeaveBenefitId")
                        .HasConstraintName("FK__contracts__leave__100C566E");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Contracts")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__contracts__offic__0D2FE9C3");

                    b.HasOne("ApplicationCore.Entities.Hrm.Role1", "Role")
                        .WithMany("Contracts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__contracts__role___0F183235");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("Contracts")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__contracts__verif__11F49EE0");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("ContractVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__contracts__verif__12E8C319");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Department", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Departments")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__departmen__audit__08A03ED0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EducationLevel", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EducationLevels")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__education__audit__17E28260");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Employee", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employees__audit__7A1D154F");

                    b.HasOne("ApplicationCore.Entities.Core.Country", "CountryCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("CountryCode")
                        .HasConstraintName("FK__employees__count__7187CF4E");

                    b.HasOne("ApplicationCore.Entities.Hrm.Department", "CurrentDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentDepartmentId")
                        .HasConstraintName("FK__employees__curre__61516785");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmploymentStatus", "CurrentEmploymentStatus")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentEmploymentStatusId")
                        .HasConstraintName("FK__employees__curre__6339AFF7");

                    b.HasOne("ApplicationCore.Entities.Hrm.JobTitle", "CurrentJobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentJobTitleId")
                        .HasConstraintName("FK__employees__curre__642DD430");

                    b.HasOne("ApplicationCore.Entities.Hrm.PayGrade", "CurrentPayGrade")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentPayGradeId")
                        .HasConstraintName("FK__employees__curre__6521F869");

                    b.HasOne("ApplicationCore.Entities.Hrm.Role1", "CurrentRole")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentRoleId")
                        .HasConstraintName("FK__employees__curre__62458BBE");

                    b.HasOne("ApplicationCore.Entities.Hrm.Shift", "CurrentShift")
                        .WithMany("Employees")
                        .HasForeignKey("CurrentShiftId")
                        .HasConstraintName("FK__employees__curre__66161CA2");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .HasConstraintName("FK__employees__emplo__605D434C");

                    b.HasOne("ApplicationCore.Entities.Core.Gender", "GenderCodeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("GenderCode")
                        .HasConstraintName("FK__employees__gende__5C8CB268");

                    b.HasOne("ApplicationCore.Entities.Core.MaritalStatus", "MaritalStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MaritalStatusId")
                        .HasConstraintName("FK__employees__marit__5D80D6A1");

                    b.HasOne("ApplicationCore.Entities.Hrm.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityId")
                        .HasConstraintName("FK__employees__natio__670A40DB");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__employees__offic__5E74FADA");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__employees__user___5F691F13");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeExperience", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeExperiences")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employee___audit__1995C0A8");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("EmployeeExperiences")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__employee___emplo__18A19C6F");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeIdentificationDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeIdentificationDetails")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employee___audit__00CA12DE");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("EmployeeIdentificationDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__employee___emplo__7EE1CA6C");

                    b.HasOne("ApplicationCore.Entities.Hrm.IdentificationType", "IdentificationType")
                        .WithMany("EmployeeIdentificationDetails")
                        .HasForeignKey("IdentificationTypeId")
                        .HasConstraintName("FK__employee___ident__7FD5EEA5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeQualification", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employee___audit__2042BE37");

                    b.HasOne("ApplicationCore.Entities.Hrm.EducationLevel", "EducationLevel")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EducationLevelId")
                        .HasConstraintName("FK__employee___educa__1F4E99FE");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__employee___emplo__1E5A75C5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeSocialNetworkDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeSocialNetworkDetails")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employee___audit__0777106D");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("EmployeeSocialNetworkDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__employee___emplo__058EC7FB");

                    b.HasOne("ApplicationCore.Entities.Hrm.SocialNetwork", "SocialNetwork")
                        .WithMany("EmployeeSocialNetworkDetails")
                        .HasForeignKey("SocialNetworkId")
                        .HasConstraintName("FK__employee___socia__0682EC34");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmployeeType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmployeeTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employee___audit__54EB90A0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmploymentStatus", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmploymentStatuses")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employmen__audit__2630A1B7");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmploymentStatusCode", "DefaultEmploymentStatusCode")
                        .WithMany("EmploymentStatuses")
                        .HasForeignKey("DefaultEmploymentStatusCodeId")
                        .HasConstraintName("FK__employmen__defau__24485945");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.EmploymentStatusCode", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmploymentStatusCodes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__employmen__audit__1D9B5BB6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Exit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ExitAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__exits__audit_use__4EFDAD20");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmploymentStatus", "ChangeStatusToNavigation")
                        .WithMany("Exits")
                        .HasForeignKey("ChangeStatusTo")
                        .HasConstraintName("FK__exits__change_st__4B2D1C3C");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("ExitEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__exits__employee___4944D3CA");

                    b.HasOne("ApplicationCore.Entities.Hrm.ExitType", "ExitType")
                        .WithMany("Exits")
                        .HasForeignKey("ExitTypeId")
                        .HasConstraintName("FK__exits__exit_type__4C214075");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "ForwardToNavigation")
                        .WithMany("ExitForwardToNavigations")
                        .HasForeignKey("ForwardTo")
                        .HasConstraintName("FK__exits__forward_t__4A38F803");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("Exits")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__exits__verificat__4D1564AE");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("ExitVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__exits__verified___4E0988E7");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.ExitType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ExitTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__exit_type__audit__44801EAD");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.IdentificationType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("IdentificationTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__identific__audit__7E22B05D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.JobTitle", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("JobTitles")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__job_title__audit__2CDD9F46");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveApplication", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("LeaveApplicationAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__leave_app__audit__2AC04CAA");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__leave_app__emplo__25077354");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "EnteredByNavigation")
                        .WithMany("LeaveApplicationEnteredByNavigations")
                        .HasForeignKey("EnteredBy")
                        .HasConstraintName("FK__leave_app__enter__26EFBBC6");

                    b.HasOne("ApplicationCore.Entities.Hrm.LeaveType", "LeaveType")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK__leave_app__leave__25FB978D");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__leave_app__verif__28D80438");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("LeaveApplicationVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__leave_app__verif__29CC2871");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveBenefit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("LeaveBenefits")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__leave_ben__audit__4F32B74A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.LeaveType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("LeaveTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__leave_typ__audit__41D8BC2C");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Nationality", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Nationalities")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__nationali__audit__1229A90A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.OfficeHour", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("OfficeHours")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__office_ho__audit__4979DDF4");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("OfficeHours")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__office_ho__offic__469D7149");

                    b.HasOne("ApplicationCore.Entities.Hrm.Shift", "Shift")
                        .WithMany("OfficeHours")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("FK__office_ho__shift__47919582");

                    b.HasOne("ApplicationCore.Entities.Hrm.WeekDay1", "WeekDay")
                        .WithMany("OfficeHours")
                        .HasForeignKey("WeekDayId")
                        .HasConstraintName("FK__office_ho__week___4885B9BB");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.PayGrade", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("PayGrades")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__pay_grade__audit__347EC10E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Resignation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ResignationAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__resignati__audit__3449B6E4");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithMany("ResignationEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__resignati__emplo__30792600");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "EnteredByNavigation")
                        .WithMany("ResignationEnteredByNavigations")
                        .HasForeignKey("EnteredBy")
                        .HasConstraintName("FK__resignati__enter__2F8501C7");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "ForwardToNavigation")
                        .WithMany("ResignationForwardToNavigations")
                        .HasForeignKey("ForwardTo")
                        .HasConstraintName("FK__resignati__forwa__316D4A39");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("Resignations")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__resignati__verif__32616E72");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("ResignationVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__resignati__verif__335592AB");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Role1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Role1")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__roles__audit_use__0D64F3ED");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Shift", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Shifts")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__shifts__audit_us__3B2BBE9D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.SocialNetwork", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__social_ne__audit__03DB89B3");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.Termination", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("TerminationAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__terminati__audit__3EC74557");

                    b.HasOne("ApplicationCore.Entities.Hrm.EmploymentStatus", "ChangeStatusToNavigation")
                        .WithMany("Terminations")
                        .HasForeignKey("ChangeStatusTo")
                        .HasConstraintName("FK__terminati__chang__3BEAD8AC");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "Employee")
                        .WithOne("TerminationEmployee")
                        .HasForeignKey("ApplicationCore.Entities.Hrm.Termination", "EmployeeId")
                        .HasConstraintName("FK__terminati__emplo__3A02903A");

                    b.HasOne("ApplicationCore.Entities.Hrm.Employee", "ForwardToNavigation")
                        .WithMany("TerminationForwardToNavigations")
                        .HasForeignKey("ForwardTo")
                        .HasConstraintName("FK__terminati__forwa__3AF6B473");

                    b.HasOne("ApplicationCore.Entities.Core.VerificationStatus", "VerificationStatus")
                        .WithMany("Terminations")
                        .HasForeignKey("VerificationStatusId")
                        .HasConstraintName("FK__terminati__verif__3CDEFCE5");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "VerifiedByUser")
                        .WithMany("TerminationVerifiedByUsers")
                        .HasForeignKey("VerifiedByUserId")
                        .HasConstraintName("FK__terminati__verif__3DD3211E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Hrm.WeekDay1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("WeekDay1")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__week_days__audit__7775B2CE");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Attribute", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Attributes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__attribute__audit__2962141D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Brand", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Brands")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__brands__audit_us__27AED5D5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Checkout", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CheckoutAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__checkouts__audit__711DBAFA");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Checkouts")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__checkouts__offic__6E414E4F");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "PostedByNavigation")
                        .WithMany("CheckoutPostedByNavigations")
                        .HasForeignKey("PostedBy")
                        .HasConstraintName("FK__checkouts__poste__6D4D2A16");

                    b.HasOne("ApplicationCore.Entities.Inventory.Shipper", "Shipper")
                        .WithMany("Checkouts")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__checkouts__shipp__702996C1");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("Checkouts")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__checkouts__trans__66A02C87");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CheckoutDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "BaseUnit")
                        .WithMany("CheckoutDetailBaseUnits")
                        .HasForeignKey("BaseUnitId")
                        .HasConstraintName("FK__checkout___base___7F6BDA51");

                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("CheckoutDetails")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__checkout___check__75E27017");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("CheckoutDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__checkout___item___78BEDCC2");

                    b.HasOne("ApplicationCore.Entities.Inventory.Store", "Store")
                        .WithMany("CheckoutDetails")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__checkout___store__76D69450");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("CheckoutDetailUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__checkout___unit___7E77B618");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CompoundUnit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CompoundUnits")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__compound___audit__79E80B25");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "BaseUnit")
                        .WithMany("CompoundUnitBaseUnits")
                        .HasForeignKey("BaseUnitId")
                        .HasConstraintName("FK__compound___base___76177A41");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "CompareUnit")
                        .WithMany("CompoundUnitCompareUnits")
                        .HasForeignKey("CompareUnitId")
                        .HasConstraintName("FK__compound___compa__78F3E6EC");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Counter", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Counters")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__counters__audit___5C229E14");

                    b.HasOne("ApplicationCore.Entities.Inventory.Store", "Store")
                        .WithMany("Counters")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__counters__store___5B2E79DB");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Customer", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("ApplicationCore.Entities.Inventory.Customer", "AccountId")
                        .HasConstraintName("FK__customers__accou__12B3B8EF");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Customers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__customers__audit__149C0161");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__customers__curre__13A7DD28");

                    b.HasOne("ApplicationCore.Entities.Inventory.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK__customers__custo__11BF94B6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.CustomerType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("CustomerTypes")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__customer___accou__0C06BB60");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomerTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__customer___audit__0CFADF99");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventorySetup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "DefaultDiscountAccount")
                        .WithMany("InventorySetups")
                        .HasForeignKey("DefaultDiscountAccountId")
                        .HasConstraintName("FK__inventory__defau__3F51553C");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithOne("InventorySetup")
                        .HasForeignKey("ApplicationCore.Entities.Inventory.InventorySetup", "OfficeId")
                        .HasConstraintName("FK__inventory__offic__3B80C458");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferDelivery", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("InventoryTransferDeliveryAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__inventory__audit__1DF06171");

                    b.HasOne("ApplicationCore.Entities.Inventory.Store", "DestinationStore")
                        .WithMany("InventoryTransferDeliveries")
                        .HasForeignKey("DestinationStoreId")
                        .HasConstraintName("FK__inventory__desti__1C0818FF");

                    b.HasOne("ApplicationCore.Entities.Inventory.InventoryTransferRequest", "InventoryTransferRequest")
                        .WithMany("InventoryTransferDeliveries")
                        .HasForeignKey("InventoryTransferRequestId")
                        .HasConstraintName("FK__inventory__inven__192BAC54");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("InventoryTransferDeliveries")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__inventory__offic__1A1FD08D");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("InventoryTransferDeliveryUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__inventory__user___1B13F4C6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferDeliveryDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "BaseUnit")
                        .WithMany("InventoryTransferDeliveryDetailBaseUnits")
                        .HasForeignKey("BaseUnitId")
                        .HasConstraintName("FK__inventory__base___25918339");

                    b.HasOne("ApplicationCore.Entities.Inventory.InventoryTransferDelivery", "InventoryTransferDelivery")
                        .WithMany("InventoryTransferDeliveryDetails")
                        .HasForeignKey("InventoryTransferDeliveryId")
                        .HasConstraintName("FK__inventory__inven__22B5168E");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("InventoryTransferDeliveryDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__inventory__item___23A93AC7");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("InventoryTransferDeliveryDetailUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__inventory__unit___249D5F00");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferRequest", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("InventoryTransferRequestAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__inventory__audit__0EAE1DE1");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuthorizedByUser")
                        .WithMany("InventoryTransferRequestAuthorizedByUsers")
                        .HasForeignKey("AuthorizedByUserId")
                        .HasConstraintName("FK__inventory__autho__08012052");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "DeliveredByUser")
                        .WithMany("InventoryTransferRequestDeliveredByUsers")
                        .HasForeignKey("DeliveredByUserId")
                        .HasConstraintName("FK__inventory__deliv__0DB9F9A8");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("InventoryTransferRequests")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__inventory__offic__033C6B35");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "ReceivedByUser")
                        .WithMany("InventoryTransferRequestReceivedByUsers")
                        .HasForeignKey("ReceivedByUserId")
                        .HasConstraintName("FK__inventory__recei__0BD1B136");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "RejectedByUser")
                        .WithMany("InventoryTransferRequestRejectedByUsers")
                        .HasForeignKey("RejectedByUserId")
                        .HasConstraintName("FK__inventory__rejec__09E968C4");

                    b.HasOne("ApplicationCore.Entities.Inventory.Store", "Store")
                        .WithMany("InventoryTransferRequests")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__inventory__store__0524B3A7");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("InventoryTransferRequestUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__inventory__user___04308F6E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.InventoryTransferRequestDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "BaseUnit")
                        .WithMany("InventoryTransferRequestDetailBaseUnits")
                        .HasForeignKey("BaseUnitId")
                        .HasConstraintName("FK__inventory__base___164F3FA9");

                    b.HasOne("ApplicationCore.Entities.Inventory.InventoryTransferRequest", "InventoryTransferRequest")
                        .WithMany("InventoryTransferRequestDetails")
                        .HasForeignKey("InventoryTransferRequestId")
                        .HasConstraintName("FK__inventory__inven__1372D2FE");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("InventoryTransferRequestDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__inventory__item___1466F737");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("InventoryTransferRequestDetailUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__inventory__unit___155B1B70");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Item", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Items")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__items__audit_use__416EA7D8");

                    b.HasOne("ApplicationCore.Entities.Inventory.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__items__brand_id__3414ACBA");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "IsVariantOfNavigation")
                        .WithMany("InverseIsVariantOfNavigation")
                        .HasForeignKey("IsVariantOf")
                        .HasConstraintName("FK__items__is_varian__407A839F");

                    b.HasOne("ApplicationCore.Entities.Inventory.ItemGroup", "ItemGroup")
                        .WithMany("Items")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("FK__items__item_grou__322C6448");

                    b.HasOne("ApplicationCore.Entities.Inventory.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId")
                        .HasConstraintName("FK__items__item_type__33208881");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "PreferredSupplier")
                        .WithMany("Items")
                        .HasForeignKey("PreferredSupplierId")
                        .HasConstraintName("FK__items__preferred__3508D0F3");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "ReorderUnit")
                        .WithMany("ItemReorderUnits")
                        .HasForeignKey("ReorderUnitId")
                        .HasConstraintName("FK__items__reorder_u__3CA9F2BB");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("ItemUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__items__unit_id__35FCF52C");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemGroup", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ItemGroups")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__item_grou__audit__22EA20B8");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "CostOfGoodsSoldAccount")
                        .WithMany("ItemGroupCostOfGoodsSoldAccounts")
                        .HasForeignKey("CostOfGoodsSoldAccountId")
                        .HasConstraintName("FK__item_grou__cost___2101D846");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "InventoryAccount")
                        .WithMany("ItemGroupInventoryAccounts")
                        .HasForeignKey("InventoryAccountId")
                        .HasConstraintName("FK__item_grou__inven__200DB40D");

                    b.HasOne("ApplicationCore.Entities.Inventory.ItemGroup", "ParentItemGroup")
                        .WithMany("InverseParentItemGroup")
                        .HasForeignKey("ParentItemGroupId")
                        .HasConstraintName("FK__item_grou__paren__21F5FC7F");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "PurchaseAccount")
                        .WithMany("ItemGroupPurchaseAccounts")
                        .HasForeignKey("PurchaseAccountId")
                        .HasConstraintName("FK__item_grou__purch__1E256B9B");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "PurchaseDiscountAccount")
                        .WithMany("ItemGroupPurchaseDiscountAccounts")
                        .HasForeignKey("PurchaseDiscountAccountId")
                        .HasConstraintName("FK__item_grou__purch__1F198FD4");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "SalesAccount")
                        .WithMany("ItemGroupSalesAccounts")
                        .HasForeignKey("SalesAccountId")
                        .HasConstraintName("FK__item_grou__sales__1B48FEF0");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "SalesDiscountAccount")
                        .WithMany("ItemGroupSalesDiscountAccounts")
                        .HasForeignKey("SalesDiscountAccountId")
                        .HasConstraintName("FK__item_grou__sales__1C3D2329");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "SalesReturnAccount")
                        .WithMany("ItemGroupSalesReturnAccounts")
                        .HasForeignKey("SalesReturnAccountId")
                        .HasConstraintName("FK__item_grou__sales__1D314762");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ItemTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__item_type__audit__2D67AF2B");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.ItemVariant", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ItemVariants")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__item_vari__audit__36BC0F3B");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("ItemVariants")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__item_vari__item___34D3C6C9");

                    b.HasOne("ApplicationCore.Entities.Inventory.Variant", "Variant")
                        .WithMany("ItemVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("FK__item_vari__varia__35C7EB02");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.SerialNumber", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__serial_nu__check__49CEE3AF");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__serial_nu__item___46F27704");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "SalesTransaction")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("SalesTransactionId")
                        .HasConstraintName("FK__serial_nu__sales__4AC307E8");

                    b.HasOne("ApplicationCore.Entities.Inventory.Store", "Store")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__serial_nu__store__48DABF76");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("SerialNumbers")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__serial_nu__unit___47E69B3D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Shipper", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("Shippers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__shippers__accoun__60E75331");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Shippers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__shippers__audit___61DB776A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Store", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Stores")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__stores__audit_us__5669C4BE");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "DefaultAccountIdForChecksNavigation")
                        .WithMany("StoreDefaultAccountIdForChecksNavigations")
                        .HasForeignKey("DefaultAccountIdForChecks")
                        .HasConstraintName("FK__stores__default___4CE05A84");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "DefaultCashAccount")
                        .WithMany("StoreDefaultCashAccounts")
                        .HasForeignKey("DefaultCashAccountId")
                        .HasConstraintName("FK__stores__default___4DD47EBD");

                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "DefaultCashRepository")
                        .WithMany("Stores")
                        .HasForeignKey("DefaultCashRepositoryId")
                        .HasConstraintName("FK__stores__default___4EC8A2F6");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Stores")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__stores__office_i__4BEC364B");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "PurchaseDiscountAccount")
                        .WithMany("StorePurchaseDiscountAccounts")
                        .HasForeignKey("PurchaseDiscountAccountId")
                        .HasConstraintName("FK__stores__purchase__529933DA");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "SalesDiscountAccount")
                        .WithMany("StoreSalesDiscountAccounts")
                        .HasForeignKey("SalesDiscountAccountId")
                        .HasConstraintName("FK__stores__sales_di__50B0EB68");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "ShippingExpenseAccount")
                        .WithMany("StoreShippingExpenseAccounts")
                        .HasForeignKey("ShippingExpenseAccountId")
                        .HasConstraintName("FK__stores__shipping__54817C4C");

                    b.HasOne("ApplicationCore.Entities.Inventory.StoreType", "StoreType")
                        .WithMany("Stores")
                        .HasForeignKey("StoreTypeId")
                        .HasConstraintName("FK__stores__store_ty__4AF81212");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.StoreType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("StoreTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__store_typ__audit__46335CF5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Supplier", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithOne("Supplier")
                        .HasForeignKey("ApplicationCore.Entities.Inventory.Supplier", "AccountId")
                        .HasConstraintName("FK__suppliers__accou__0559BDD1");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Suppliers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__suppliers__audit__07420643");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("Suppliers")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__suppliers__curre__064DE20A");

                    b.HasOne("ApplicationCore.Entities.Inventory.SupplierType", "SupplierType")
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierTypeId")
                        .HasConstraintName("FK__suppliers__suppl__04659998");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.SupplierType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("SupplierTypes")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__supplier___accou__7EACC042");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("SupplierTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__supplier___audit__7FA0E47B");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Unit", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Units")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__units__audit_use__7152C524");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Inventory.Variant", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Attribute", "Attribute")
                        .WithMany("Variants")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK__variants__attrib__2F1AED73");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Variants")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__variants__audit___300F11AC");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.ItemCostPrice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ItemCostPrices")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__item_cost__audit__2FDA0782");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("ItemCostPrices")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__item_cost__item___2B155265");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("ItemCostPrices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__item_cost__suppl__2CFD9AD7");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("ItemCostPrices")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__item_cost__unit___2C09769E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("OrderAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__orders__audit_us__691284DE");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Orders")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__orders__office_i__6265874F");

                    b.HasOne("ApplicationCore.Entities.Purchases.PriceType", "PriceType")
                        .WithMany("Orders")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__orders__price_ty__5F891AA4");

                    b.HasOne("ApplicationCore.Entities.Purchases.Quotation", "Quotation")
                        .WithMany("Orders")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK__orders__quotatio__5CACADF9");

                    b.HasOne("ApplicationCore.Entities.Inventory.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__orders__shipper___607D3EDD");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__orders__supplier__5E94F66B");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("OrderUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__orders__user_id__61716316");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.OrderDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__order_det__item___6ECB5E34");

                    b.HasOne("ApplicationCore.Entities.Purchases.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__order_det__order__6DD739FB");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__order_det__unit___71A7CADF");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.PriceType", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("PriceTypes")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__price_typ__audit__26509D48");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Purchase", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("Purchases")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__purchases__check__3C3FDE67");

                    b.HasOne("ApplicationCore.Entities.Purchases.PriceType", "PriceType")
                        .WithMany("Purchases")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__purchases__price__3E2826D9");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__purchases__suppl__3D3402A0");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.PurchaseReturn", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__purchase___check__41F8B7BD");

                    b.HasOne("ApplicationCore.Entities.Purchases.Purchase", "Purchase")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK__purchase___purch__41049384");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__purchase___suppl__42ECDBF6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.Quotation", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("QuotationAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__quotation__audit__513AFB4D");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Quotations")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__quotation__offic__4A8DFDBE");

                    b.HasOne("ApplicationCore.Entities.Purchases.PriceType", "PriceType")
                        .WithMany("Quotations")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__quotation__price__47B19113");

                    b.HasOne("ApplicationCore.Entities.Inventory.Shipper", "Shipper")
                        .WithMany("Quotations")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__quotation__shipp__48A5B54C");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Supplier")
                        .WithMany("Quotations")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__quotation__suppl__46BD6CDA");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("QuotationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__quotation__user___4999D985");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.QuotationDetail", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__quotation__item___56F3D4A3");

                    b.HasOne("ApplicationCore.Entities.Purchases.Quotation", "Quotation")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK__quotation__quota__55FFB06A");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("QuotationDetails")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__quotation__unit___59D0414E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.SupplierPayment", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.BankAccount", "Bank")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK__supplier___bank___7A3D10E0");

                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "CashRepository")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("CashRepositoryId")
                        .HasConstraintName("FK__supplier___cash___7948ECA7");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__supplier___curre__766C7FFC");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__supplier___suppl__75785BC3");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("SupplierPayments")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__supplier___trans__7484378A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Purchases.SupplierwiseCostPrice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("SupplierwiseCostPrices")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__supplierw__audit__377B294A");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("SupplierwiseCostPrices")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__supplierw__item___349EBC9F");

                    b.HasOne("ApplicationCore.Entities.Inventory.Supplier", "Supplier")
                        .WithMany("SupplierwiseCostPrices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__supplierw__suppl__3592E0D8");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("SupplierwiseCostPrices")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__supplierw__unit___36870511");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Cashier", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AssociatedUser")
                        .WithMany("CashierAssociatedUsers")
                        .HasForeignKey("AssociatedUserId")
                        .HasConstraintName("FK__cashiers__associ__468862B0");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CashierAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cashiers__audit___4964CF5B");

                    b.HasOne("ApplicationCore.Entities.Inventory.Counter", "Counter")
                        .WithMany("Cashiers")
                        .HasForeignKey("CounterId")
                        .HasConstraintName("FK__cashiers__counte__477C86E9");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CashierLoginInfo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AttemptedByNavigation")
                        .WithMany("CashierLoginInfoAttemptedByNavigations")
                        .HasForeignKey("AttemptedBy")
                        .HasConstraintName("FK__cashier_l__attem__5105F123");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CashierLoginInfoAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__cashier_l__audit__51FA155C");

                    b.HasOne("ApplicationCore.Entities.Sales.Cashier", "Cashier")
                        .WithMany("CashierLoginInfoes")
                        .HasForeignKey("CashierId")
                        .HasConstraintName("FK__cashier_l__cashi__5011CCEA");

                    b.HasOne("ApplicationCore.Entities.Inventory.Counter", "Counter")
                        .WithMany("CashierLoginInfoes")
                        .HasForeignKey("CounterId")
                        .HasConstraintName("FK__cashier_l__count__4F1DA8B1");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.ClosingCash", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "ApprovedByNavigation")
                        .WithMany("ClosingCashApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK__closing_c__appro__46535886");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ClosingCashAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__closing_c__audit__47477CBF");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("ClosingCashUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__closing_c__user___371114F6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Coupon", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "AssociatedPriceType")
                        .WithMany("CouponAssociatedPriceTypes")
                        .HasForeignKey("AssociatedPriceTypeId")
                        .HasConstraintName("FK__coupons__associa__066DDD9B");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Coupons")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__coupons__audit_u__0856260D");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "ForTicketOfPriceType")
                        .WithMany("CouponForTicketOfPriceTypes")
                        .HasForeignKey("ForTicketOfPriceTypeId")
                        .HasConstraintName("FK__coupons__for_tic__076201D4");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CustomerReceipt", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "CashRepository")
                        .WithMany("CustomerReceipts")
                        .HasForeignKey("CashRepositoryId")
                        .HasConstraintName("FK__customer___cash___2121D3D7");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "CheckClearingTransactionMaster")
                        .WithMany("CustomerReceiptCheckClearingTransactionMasters")
                        .HasForeignKey("CheckClearingTransactionMasterId")
                        .HasConstraintName("FK__customer___check__230A1C49");

                    b.HasOne("ApplicationCore.Entities.Finance.BankAccount", "CollectedOnBank")
                        .WithMany("CustomerReceipts")
                        .HasForeignKey("CollectedOnBankId")
                        .HasConstraintName("FK__customer___colle__2215F810");

                    b.HasOne("ApplicationCore.Entities.Core.Currency", "CurrencyCodeNavigation")
                        .WithMany("CustomerReceipts")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK__customer___curre__202DAF9E");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("CustomerReceipts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__customer___custo__1F398B65");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("CustomerReceiptTransactionMasters")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__customer___trans__1E45672C");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.CustomerwiseSellingPrice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("CustomerwiseSellingPrices")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__customerw__audit__37461F20");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("CustomerwiseSellingPrices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__customerw__custo__355DD6AE");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("CustomerwiseSellingPrices")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__customerw__item___3469B275");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("CustomerwiseSellingPrices")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__customerw__unit___3651FAE7");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.GiftCard", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("GiftCards")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__gift_card__audit__11207638");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("GiftCards")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__gift_card__custo__102C51FF");

                    b.HasOne("ApplicationCore.Entities.Finance.Account", "PayableAccount")
                        .WithMany("GiftCards")
                        .HasForeignKey("PayableAccountId")
                        .HasConstraintName("FK__gift_card__payab__0F382DC6");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.GiftCardTransaction", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Sales.GiftCard", "GiftCard")
                        .WithMany("GiftCardTransactions")
                        .HasForeignKey("GiftCardId")
                        .HasConstraintName("FK__gift_card__gift___15E52B55");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("GiftCardTransactions")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__gift_card__trans__16D94F8E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.ItemSellingPrice", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ItemSellingPrices")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__item_sell__audit__2FA4FD58");

                    b.HasOne("ApplicationCore.Entities.Inventory.CustomerType", "CustomerType")
                        .WithMany("ItemSellingPrices")
                        .HasForeignKey("CustomerTypeId")
                        .HasConstraintName("FK__item_sell__custo__2CC890AD");

                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("ItemSellingPrices")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__item_sell__item___2AE0483B");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "PriceType")
                        .WithMany("ItemSellingPrices")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__item_sell__price__2DBCB4E6");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("ItemSellingPrices")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__item_sell__unit___2BD46C74");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.LateFee", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.Account", "Account")
                        .WithMany("LateFees")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__late_fee__accoun__1B9E04AB");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("LateFees")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__late_fee__audit___1C9228E4");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.LateFeePosting", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("LateFeePostings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__late_fee___custo__224B023A");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "LateFeeTran")
                        .WithMany("LateFeePostingLateFeeTrans")
                        .HasForeignKey("LateFeeTranId")
                        .HasConstraintName("FK__late_fee___late___233F2673");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithOne("LateFeePostingTransactionMaster")
                        .HasForeignKey("ApplicationCore.Entities.Sales.LateFeePosting", "TransactionMasterId")
                        .HasConstraintName("FK__late_fee___trans__2156DE01");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.OpeningCash", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("OpeningCashAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__opening_c__audit__324C5FD9");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("OpeningCashUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__opening_c__user___2E7BCEF5");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Order1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Order1AuditUser")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__orders__audit_us__7A0806B6");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("Order1")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__orders__customer__6F8A7843");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Order1")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__orders__office_i__735B0927");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "PriceType")
                        .WithMany("Order1")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__orders__price_ty__707E9C7C");

                    b.HasOne("ApplicationCore.Entities.Sales.Quotation1", "Quotation")
                        .WithMany("Order1")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK__orders__quotatio__6DA22FD1");

                    b.HasOne("ApplicationCore.Entities.Inventory.Shipper", "Shipper")
                        .WithMany("Order1")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__orders__shipper___7172C0B5");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("Order1User")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__orders__user_id__7266E4EE");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.OrderDetail1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("OrderDetail1")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__order_det__item___7FC0E00C");

                    b.HasOne("ApplicationCore.Entities.Sales.Order1", "Order")
                        .WithMany("OrderDetail1")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__order_det__order__7ECCBBD3");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("OrderDetail1")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__order_det__unit___029D4CB7");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.PaymentTerm", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("PaymentTerms")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__payment_t__audit__41C3AD93");

                    b.HasOne("ApplicationCore.Entities.Finance.Frequency", "DueFrequency")
                        .WithMany("PaymentTermDueFrequencies")
                        .HasForeignKey("DueFrequencyId")
                        .HasConstraintName("FK__payment_t__due_f__3DF31CAF");

                    b.HasOne("ApplicationCore.Entities.Sales.LateFee", "LateFee")
                        .WithMany("PaymentTerms")
                        .HasForeignKey("LateFeeId")
                        .HasConstraintName("FK__payment_t__late___3FDB6521");

                    b.HasOne("ApplicationCore.Entities.Finance.Frequency", "LateFeePostingFrequency")
                        .WithMany("PaymentTermLateFeePostingFrequencies")
                        .HasForeignKey("LateFeePostingFrequencyId")
                        .HasConstraintName("FK__payment_t__late___40CF895A");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.PriceType1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("PriceType1")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__price_typ__audit__261B931E");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Quotation1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Quotation1AuditUser")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__quotation__audit__62307D25");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("Quotation1")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__quotation__custo__57B2EEB2");

                    b.HasOne("ApplicationCore.Entities.Core.Office", "Office")
                        .WithMany("Quotation1")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK__quotation__offic__5B837F96");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "PriceType")
                        .WithMany("Quotation1")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__quotation__price__58A712EB");

                    b.HasOne("ApplicationCore.Entities.Inventory.Shipper", "Shipper")
                        .WithMany("Quotation1")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("FK__quotation__shipp__599B3724");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "User")
                        .WithMany("Quotation1User")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__quotation__user___5A8F5B5D");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.QuotationDetail1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Item", "Item")
                        .WithMany("QuotationDetail1")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__quotation__item___67E9567B");

                    b.HasOne("ApplicationCore.Entities.Sales.Quotation1", "Quotation")
                        .WithMany("QuotationDetail1")
                        .HasForeignKey("QuotationId")
                        .HasConstraintName("FK__quotation__quota__66F53242");

                    b.HasOne("ApplicationCore.Entities.Inventory.Unit", "Unit")
                        .WithMany("QuotationDetail1")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK__quotation__unit___6AC5C326");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Return", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("Returns")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__returns__checkou__26DAAD2D");

                    b.HasOne("ApplicationCore.Entities.Inventory.Counter", "Counter")
                        .WithMany("Returns")
                        .HasForeignKey("CounterId")
                        .HasConstraintName("FK__returns__counter__29B719D8");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("Returns")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__returns__custome__2AAB3E11");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "PriceType")
                        .WithMany("Returns")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__returns__price_t__2B9F624A");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "ReturnTransactionMaster")
                        .WithMany("ReturnReturnTransactionMasters")
                        .HasForeignKey("ReturnTransactionMasterId")
                        .HasConstraintName("FK__returns__return___28C2F59F");

                    b.HasOne("ApplicationCore.Entities.Sales.Sale", "Sales")
                        .WithMany("Returns")
                        .HasForeignKey("SalesId")
                        .HasConstraintName("FK__returns__sales_i__25E688F4");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("ReturnTransactionMasters")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__returns__transac__27CED166");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sales.Sale", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Finance.CashRepository", "CashRepository")
                        .WithMany("Sales")
                        .HasForeignKey("CashRepositoryId")
                        .HasConstraintName("FK__sales__cash_repo__0E0EFF63");

                    b.HasOne("ApplicationCore.Entities.Inventory.Checkout", "Checkout")
                        .WithMany("Sales")
                        .HasForeignKey("CheckoutId")
                        .HasConstraintName("FK__sales__checkout___13C7D8B9");

                    b.HasOne("ApplicationCore.Entities.Inventory.Counter", "Counter")
                        .WithMany("Sales")
                        .HasForeignKey("CounterId")
                        .HasConstraintName("FK__sales__counter_i__14BBFCF2");

                    b.HasOne("ApplicationCore.Entities.Sales.Coupon", "Coupon")
                        .WithMany("Sales")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK__sales__coupon_id__1798699D");

                    b.HasOne("ApplicationCore.Entities.Inventory.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__sales__customer___15B0212B");

                    b.HasOne("ApplicationCore.Entities.Finance.FiscalYear", "FiscalYearCodeNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("FiscalYearCode")
                        .HasConstraintName("FK__sales__fiscal_ye__0D1ADB2A");

                    b.HasOne("ApplicationCore.Entities.Sales.GiftCard", "GiftCard")
                        .WithMany("Sales")
                        .HasForeignKey("GiftCardId")
                        .HasConstraintName("FK__sales__gift_card__1A74D648");

                    b.HasOne("ApplicationCore.Entities.Sales.PaymentTerm", "PaymentTerm")
                        .WithMany("Sales")
                        .HasForeignKey("PaymentTermId")
                        .HasConstraintName("FK__sales__payment_t__1980B20F");

                    b.HasOne("ApplicationCore.Entities.Sales.PriceType1", "PriceType")
                        .WithMany("Sales")
                        .HasForeignKey("PriceTypeId")
                        .HasConstraintName("FK__sales__price_typ__0F03239C");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "ReceiptTransactionMaster")
                        .WithMany("SaleReceiptTransactionMasters")
                        .HasForeignKey("ReceiptTransactionMasterId")
                        .HasConstraintName("FK__sales__receipt_t__11DF9047");

                    b.HasOne("ApplicationCore.Entities.Sales.Order1", "SalesOrder")
                        .WithMany("Sales")
                        .HasForeignKey("SalesOrderId")
                        .HasConstraintName("FK__sales__sales_ord__0FF747D5");

                    b.HasOne("ApplicationCore.Entities.Sales.Quotation1", "SalesQuotation")
                        .WithMany("Sales")
                        .HasForeignKey("SalesQuotationId")
                        .HasConstraintName("FK__sales__sales_quo__10EB6C0E");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "Salesperson")
                        .WithMany("Sales")
                        .HasForeignKey("SalespersonId")
                        .HasConstraintName("FK__sales__salespers__16A44564");

                    b.HasOne("ApplicationCore.Entities.Finance.TransactionMaster", "TransactionMaster")
                        .WithMany("SaleTransactionMasters")
                        .HasForeignKey("TransactionMasterId")
                        .HasConstraintName("FK__sales__transacti__12D3B480");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Social.Feed", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "CreatedByNavigation")
                        .WithMany("FeedCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__feeds__created_b__77EAB41A");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "DeletedByNavigation")
                        .WithMany("FeedDeletedByNavigations")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__feeds__deleted_b__7CAF6937");

                    b.HasOne("ApplicationCore.Entities.Social.Feed", "ParentFeed")
                        .WithMany("InverseParentFeed")
                        .HasForeignKey("ParentFeedId")
                        .HasConstraintName("FK__feeds__parent_fe__79D2FC8C");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Category", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Categories")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__categorie__audit__67DE6983");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Configuration", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Configurations")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__configura__audit__57A801BA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Contact", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Contacts")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__contacts__audit___0A338187");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Content", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("ContentAuditUsers")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__contents__audit___74444068");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "Author")
                        .WithMany("ContentAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__contents__author__6E8B6712");

                    b.HasOne("ApplicationCore.Entities.Website.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__contents__catego__6D9742D9");

                    b.HasOne("ApplicationCore.Entities.Accounts.User", "LastEditor")
                        .WithMany("ContentLastEditors")
                        .HasForeignKey("LastEditorId")
                        .HasConstraintName("FK__contents__last_e__7073AF84");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.EmailSubscription", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("EmailSubscriptions")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__email_sub__audit__61316BF4");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.Menu1", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("Menu1")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__menus__audit_use__7908F585");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Website.MenuItem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Accounts.User", "AuditUser")
                        .WithMany("MenuItems")
                        .HasForeignKey("AuditUserId")
                        .HasConstraintName("FK__menu_item__audit__019E3B86");

                    b.HasOne("ApplicationCore.Entities.Website.Content", "Content")
                        .WithMany("MenuItems")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("FK__menu_item__conte__7FB5F314");

                    b.HasOne("ApplicationCore.Entities.Website.Menu1", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK__menu_item__menu___7DCDAAA2");

                    b.HasOne("ApplicationCore.Entities.Website.MenuItem", "ParentMenuItem")
                        .WithMany("InverseParentMenuItem")
                        .HasForeignKey("ParentMenuItemId")
                        .HasConstraintName("FK__menu_item__paren__00AA174D");
                });
#pragma warning restore 612, 618
        }
    }
}
